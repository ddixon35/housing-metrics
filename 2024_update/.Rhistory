combined_data$`Inventory Units` <- as.numeric((combined_data$`Inventory Units`))
combined_data$`Asking Rent Per Unit` <- round(combined_data$`Asking Rent Per Unit` / 10) * 10
# Remove with less than 50 units
removed <- subset(combined_data, `Inventory Units` < 50)
combined_data <- subset(combined_data, `Inventory Units` >= 50)
# Pivot & calculate change over time
combined_data_piv <- combined_data %>% pivot_wider(id_cols = 'name', names_from = 'Period', values_from = c('Inventory Units', 'Asking Rent Per Unit'))
ed <- paste0("Asking Rent Per Unit_", earliestdate) # Construct the field name dynamically
ld <- paste0("Asking Rent Per Unit_", latestdate) # Construct the field name dynamically
combined_data_piv$prct_change_rent <- (combined_data_piv[[ld]] - combined_data_piv[[ed]]) / combined_data_piv[[ed]]
# Combine w/reference table
combined_data_piv <- left_join(combined_data_piv, reference_table, by = "name")
# Summarize by various geos ---------------------
# Summarize by Center
by_rgc <- combined_data_piv %>%
filter(type == "rgc") %>%
select(name, starts_with("Inventory Units_"), starts_with("Asking Rent Per Unit_"), prct_change_rent, type, county)
# Summarize by Center
by_hct <- combined_data_piv %>%
filter(type == "hct") %>%
select(name, starts_with("Inventory Units_"), starts_with("Asking Rent Per Unit_"), prct_change_rent, type, county)
# Summarize by Center
by_county <- combined_data_piv %>%
filter(is.na(type)) %>%
select(name, starts_with("Inventory Units_"), starts_with("Asking Rent Per Unit_"), prct_change_rent, type, county)
# Cleanup and export ---------------------
# Export Data
export_file <- paste0(export_path, "/metric18_raw_1bdrm.xlsx")
work_book <- createWorkbook()
# Add the "by_rgc" sheet
addWorksheet(work_book, sheetName = "by_rgc")
writeData(work_book, sheet = "by_rgc", by_rgc)
writeData(work_book, sheet = "by_rgc", x = data.frame(rgc_source_info), startRow = nrow(by_rgc) + 3, startCol = 1)
# Add the "by_hct" sheet
addWorksheet(work_book, sheetName = "by_hct")
writeData(work_book, sheet = "by_hct", by_hct)
writeData(work_book, sheet = "by_hct", x = data.frame(hct_source_info), startRow = nrow(by_hct) + 3, startCol = 1)
# Add the "by_county" sheet
addWorksheet(work_book, sheetName = "by_county")
writeData(work_book, sheet = "by_county", by_county)
writeData(work_book, sheet = "by_county", x = data.frame(county_source_info), startRow = nrow(by_county) + 3, startCol = 1)
saveWorkbook(work_book, file = export_file, overwrite = TRUE)
library(openxlsx)
library(tidyr)
library(tidyverse)
library(stringr)
library(dplyr)
library(psrccensus)
library(magrittr)
library(ggplot2)
# assumptions
metro_area <- "Seattle, WA"
earliestdate <- "2012-06-30"
latestdate <- "2024-06-30"
smalltbl_earliestdate <- "2021-06-30"
smalltbl_latestdate <- "2024-06-30"
term <- 360                     # 30 year mortgage
downpayment <- 0.20             # JCHS report used 3.5% but I will use 20% given our market conditions
propertytax <- 0.01             # King County is 1%, Snohomish County is 0.89%
propertyins <- 0.0035           # same as JCHS
mortgageins <- 0.00             # set to 0 for 20% downpayment
maxdebttoincome <- 0.31         # same as JCHS
interest_url <- "https://www.freddiemac.com/pmms/docs/historicalweeklydata.xlsx"
ZHVI_url <- "https://files.zillowstatic.com/research/public_csvs/zhvi/Metro_zhvi_uc_sfrcondo_tier_0.33_0.67_sm_sa_month.csv"
ZORI_url <- "https://files.zillowstatic.com/research/public_csvs/zori/Metro_zori_uc_sfrcondomfr_sm_sa_month.csv?t=1711667054"
# ZORI: Zillow Observed Rent Index - All Homes + Multifamily, Smoothed, Seasonally-Adjusted
# ZHVI: Zillow Home Value Index - All Homes (SFR & Condo) Time series, Smoothed, Seasonally-Adjusted
# ---------------- Mortgage Rate DATA ----------------
# download Mortgage Rate data from FreddieMac site
int_raw = read.xlsx(interest_url, sheet=1)
# clean up table
int <- int_raw[-(1:4),]
int <- subset(int, select = c(X1, X2))
# clean up data
int$X1 <- convertToDate(int$X1)
int$X2 <- as.numeric(int$X2)
int <- int[!is.na(int$X2),]
int <- int %>%
rename("int_date" = "X1") %>%
rename("int_rate" = "X2")
# refine dates
int <- with(int, int[(int_date >= earliestdate & int_date <= latestdate), ])
int$month <- str_sub(int$int_date, 1, 7)
int <- int[!duplicated(int$month), ]
# ---------------- ZILLOW DATA ----------------
ZORI_raw = read.csv(ZORI_url)
ZHVI_raw = read.csv(ZHVI_url)
# Clean data
ZORI <- subset(ZORI_raw, ZORI_raw$RegionName == metro_area)
ZHVI <- subset(ZHVI_raw, ZHVI_raw$RegionName == metro_area)
colnames(ZORI)<-gsub("X","",colnames(ZORI))
colnames(ZHVI)<-gsub("X","",colnames(ZHVI))
ZORI_long <- ZORI %>% select(starts_with("20"))
ZORI_long %<>% pivot_longer(everything(), names_to = "date", values_to = "zori_rent")
ZORI_long$month <- str_sub(ZORI_long$date, 1, 7)
ZORI_long$month <- gsub("\\.", "-", ZORI_long$month)
ZORI_long  %<>% relocate(month, .before = date)
ZORI_long$date <- gsub("\\.", "-", ZORI_long$date)
ZHVI_long <- ZHVI %>% select(starts_with("20"))
ZHVI_long %<>% pivot_longer(everything(), names_to = "date", values_to = "zhvi_value")
ZHVI_long$month <- str_sub(ZHVI_long$date, 1, 7)
ZHVI_long$month <- gsub("\\.", "-", ZHVI_long$month)
ZHVI_long  %<>% relocate(month, .before = date)
ZHVI_long <- subset(ZHVI_long, select = -c(date))
zillow <- merge(ZHVI_long, ZORI_long, by= "month")
# ---------------- JOIN DATA & ANALYZE ----------------
# crunch monthly payment, required income
analysis <- zillow %>% left_join(int)
analysis <- na.omit(analysis)
analysis$date <- as.Date(analysis$date)
analysis$mthlyrate <- analysis$int_rate / 100 / 12
analysis$r <- (1 + analysis$mthlyrate) ^ term - 1
analysis$loan_amt = analysis$zhvi_value - (downpayment * analysis$zhvi_value)
analysis$propertytax_mnthlypymt = analysis$loan_amt * propertytax / 12
analysis$propertyins_mnthlypymt = analysis$loan_amt * propertyins / 12
analysis$mortgageins_mnthlypymt = analysis$loan_amt * mortgageins / 12
analysis$payment = analysis$loan_amt * analysis$mthlyrate * ((analysis$r + 1) / analysis$r) + (analysis$propertytax_mnthlypymt + analysis$propertyins_mnthlypymt + analysis$mortgageins_mnthlypymt)
analysis$reqincome = (analysis$payment / maxdebttoincome) * 12
# ---------------- SMALL TABLE FOR EXPORT ----------------
smalltbl <- with(analysis, analysis[(date >= smalltbl_earliestdate & date <= smalltbl_latestdate), ])
smalltbl <- subset(smalltbl, str_sub(smalltbl$date, -5,-4) == str_sub(smalltbl_earliestdate, -5,-4))
smalltbl <- subset(smalltbl, select = c(date, int_rate, zhvi_value, payment, reqincome))
smalltbl <- smalltbl %>% arrange(ymd(smalltbl$date))
# ---------------- GRAPHING ----------------
reqincome_vs_int_plot <- ggplot(analysis)  +
geom_bar(aes(x=date, y=int_rate*20000),stat="identity", fill="skyblue2",colour="#ffffff")+
geom_line(aes(x=date, y=reqincome),stat="identity",color="grey40", linewidth=1)+
labs(title= paste(metro_area, "MSA - Mortgage for Median Home"),
x="Year",y="Minimum Income Required ($)") +
scale_y_continuous(labels=function(x) format(x, big.mark = ",", scientific = FALSE),sec.axis=sec_axis(~.*0.00005,name="Mortgage Rate (%)")) +
scale_x_date(breaks = scales::breaks_width("1 year"),minor_breaks = scales::breaks_width("1 year")) +
theme(text = element_text(size = 20))
reqincome_vs_int_plot
mortgage_vs_rent_plot <- ggplot(analysis)  +
geom_line(aes(x=date, y=payment),stat="identity",color="grey40", linewidth=1)+
geom_line(aes(x=date, y=zori_rent),stat="identity",color="skyblue2", linewidth=1)+
labs(title= paste(metro_area, "MSA - Mortgage vs Median Rent"),
x="Year",y="Monthly Payment ($)") +
scale_y_continuous(labels=function(x) format(x, big.mark = ",", scientific = FALSE),expand = c(0, 0), limits = c(0, NA)) +
scale_x_date(breaks = scales::breaks_width("1 year"),minor_breaks = scales::breaks_width("1 year")) +
theme(text = element_text(size = 20))
mortgage_vs_rent_plot
View(smalltbl)
View(analysis)
View(analysis)
export_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric21_avg_mortgage_payment"
source_info <- c("Source: Zillow, Home Value Index; Freddie Mac, Primary Mortgage Market Survey; calculated by PSRC.")
export_file <- paste0(export_path, "/metric21_raw.xlsx")
work_book <- createWorkbook()
# Add the "by_rgc" sheet
addWorksheet(work_book, sheetName = "analysis")
writeData(work_book, sheet = "analysis", analysis)
writeData(work_book, sheet = "analysis", x = data.frame(source_info), startRow = nrow(analysis) + 3, startCol = 1)
saveWorkbook(work_book, file = export_file, overwrite = TRUE)
library(openxlsx)
library(tidyr)
library(stringr)
library(dplyr)
library(magrittr)
library(psrccensus)
library(tidycensus)
library(purrr)
# TITLE: Home Value & Rent
# GEOGRAPHIES: Seattle MSA
# DATA SOURCE: Zillow, ACS
# DATE MODIFIED: 8.15.2024
# AUTHOR: Eric Clute
library(openxlsx)
library(tidyr)
library(stringr)
library(dplyr)
library(magrittr)
library(psrccensus)
library(tidycensus)
library(purrr)
# assumptions
#  ZHVI: Zillow Home Value Index - All Homes (SFR & Condo) Time series, Smoothed, Seasonally-Adjusted
#  ZORI: Zillow Observed Rent Index - All Homes + Multifamily, Smoothed, Seasonally-Adjusted
export_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric12-13_metro_area_rent_home_value"
ZHVI_url <- "https://files.zillowstatic.com/research/public_csvs/zhvi/Metro_zhvi_uc_sfrcondo_tier_0.33_0.67_sm_sa_month.csv"
ZORI_url <- "https://files.zillowstatic.com/research/public_csvs/zori/Metro_zori_uc_sfrcondomfr_sm_sa_month.csv?t=1711667054"
years <- c(2015,2016,2017,2018,2019,2021,2022)
# ---------------- Functions ------------------
pull_data <- function(years){
# returns a list of get_psrc_pums outputs, one for each year
lapply(years, function(x) get_psrc_pums(1, x, "h",c("HINCP")))
}
inc_clean_func <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = NULL, rr=TRUE)
}
# ---------------- HH Income data -----------------
# pull the data
hh_inc <- pull_data(years)
# Summarize by income
hh_inc_all <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows)
View(hh_inc_all)
library(openxlsx)
library(tidyr)
library(stringr)
library(dplyr)
library(magrittr)
library(psrccensus)
library(tidycensus)
library(purrr)
# assumptions
#  ZHVI: Zillow Home Value Index - All Homes (SFR & Condo) Time series, Smoothed, Seasonally-Adjusted
#  ZORI: Zillow Observed Rent Index - All Homes + Multifamily, Smoothed, Seasonally-Adjusted
export_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric12-13_metro_area_rent_home_value"
ZHVI_url <- "https://files.zillowstatic.com/research/public_csvs/zhvi/Metro_zhvi_uc_sfrcondo_tier_0.33_0.67_sm_sa_month.csv"
ZORI_url <- "https://files.zillowstatic.com/research/public_csvs/zori/Metro_zori_uc_sfrcondomfr_sm_sa_month.csv?t=1711667054"
years <- c(2015)#,2016,2017,2018,2019,2021,2022)
# ---------------- Functions ------------------
pull_data <- function(years){
# returns a list of get_psrc_pums outputs, one for each year
lapply(years, function(x) get_psrc_pums(1, x, "h",c("HINCP")))
}
inc_clean_func <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = NULL, rr=TRUE)
hh_inc_calc <- hh_inc_calc %>%
mutate(hh_inc, MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
}
# pull the data
hh_inc <- pull_data(years)
# Summarize by income
hh_inc_all <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows)
# ---------------- Functions ------------------
pull_data <- function(years){
# returns a list of get_psrc_pums outputs, one for each year
lapply(years, function(x) get_psrc_pums(1, x, "h",c("HINCP")))
mutate(x, MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
}
inc_clean_func <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = NULL, rr=TRUE)
}
# pull the data
hh_inc <- pull_data(years)
# ---------------- Functions ------------------
pull_data <- function(years){
# returns a list of get_psrc_pums outputs, one for each year
lapply(years, function(x) get_psrc_pums(1, x, "h",c("HINCP")))
mutate(hh_inc, MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
}
inc_clean_func <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = NULL, rr=TRUE)
}
# pull the data
hh_inc <- pull_data(years)
# ---------------- Functions ------------------
pull_data <- function(years){
# returns a list of get_psrc_pums outputs, one for each year
lapply(years, function(x) get_psrc_pums(1, x, "h",c("HINCP")))
hh_inc <- hh_inc %>%
mutate(hh_inc, MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
}
inc_clean_func <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = NULL, rr=TRUE)
}
# pull the data
hh_inc <- pull_data(years)
View(hh_inc)
View(hh_inc)
View(hh_inc[[1]][["variables"]])
# ---------------- Functions ------------------
pull_data <- function(years){
# returns a list of get_psrc_pums outputs, one for each year
lapply(years, function(x) get_psrc_pums(1, x, "h",c("HINCP")))
hh_inc[[1]][["variables"]] <- hh_inc[[1]][["variables"]] %>%
mutate(hh_inc[[1]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
}
inc_clean_func <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = NULL, rr=TRUE)
}
# pull the data
hh_inc <- pull_data(years)
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = "MSA", rr=TRUE)
# Summarize by income
hh_inc_all <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows)
# AUTHOR: Eric Clute
library(openxlsx)
library(tidyr)
library(stringr)
library(dplyr)
library(magrittr)
library(psrccensus)
library(tidycensus)
library(purrr)
# assumptions
#  ZHVI: Zillow Home Value Index - All Homes (SFR & Condo) Time series, Smoothed, Seasonally-Adjusted
#  ZORI: Zillow Observed Rent Index - All Homes + Multifamily, Smoothed, Seasonally-Adjusted
export_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric12-13_metro_area_rent_home_value"
ZHVI_url <- "https://files.zillowstatic.com/research/public_csvs/zhvi/Metro_zhvi_uc_sfrcondo_tier_0.33_0.67_sm_sa_month.csv"
ZORI_url <- "https://files.zillowstatic.com/research/public_csvs/zori/Metro_zori_uc_sfrcondomfr_sm_sa_month.csv?t=1711667054"
years <- c(2015)#,2016,2017,2018,2019,2021,2022)
# ---------------- Functions ------------------
pull_data <- function(years){
# returns a list of get_psrc_pums outputs, one for each year
lapply(years, function(x) get_psrc_pums(1, x, "h",c("HINCP")))
hh_inc[[1]][["variables"]] <- hh_inc[[1]][["variables"]] %>%
mutate(hh_inc[[1]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
}
inc_clean_func <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = "MSA", rr=TRUE)
}
# ---------------- HH Income data -----------------
# pull the data
hh_inc <- pull_data(years)
# ---------------- Functions ------------------
pull_data <- function(years){
# returns a list of get_psrc_pums outputs, one for each year
lapply(years, function(x) get_psrc_pums(1, x, "h",c("HINCP")))
hh_inc[[1]][["variables"]] <- hh_inc[[1]][["variables"]] %>%
mutate(hh_inc[[1]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
}
# pull the data
hh_inc <- pull_data(years)
# ---------------- Functions ------------------
pull_data <- function(years){
# returns a list of get_psrc_pums outputs, one for each year
lapply(years, function(x) get_psrc_pums(1, x, "h",c("HINCP")))
}
inc_clean_func <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = "MSA", rr=TRUE)
}
# pull the data
hh_inc <- pull_data(years)
inc_clean_func <- function(hh_inc){
hh_inc[[1]][["variables"]] <- hh_inc[[1]][["variables"]] %>%
mutate(hh_inc[[1]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = "MSA", rr=TRUE)
}
# Summarize by income
hh_inc_all <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows)
inc_clean_func <- function(hh_inc){
hh_inc <- hh_inc %>%
mutate(hh_inc, MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = "MSA", rr=TRUE)
}
# Summarize by income
hh_inc_all <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows)
inc_clean_func <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = "MSA", rr=TRUE)
}
hh_inc <- hh_inc %>%
mutate(hh_inc, MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
hh_inc[[1]][["variables"]] <- hh_inc[[1]][["variables"]] %>%
mutate(hh_inc[[1]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
inc_clean_func <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = "MSA", rr=TRUE)
}
# Summarize by income
hh_inc_all <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows)
View(hh_inc_all)
# Summarize by income
hh_inc_all <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows) %>%
filter(MSA == "Seattle Tacoma Bellevue MSA")
View(hh_inc_all)
years <- c(2015,2016,2017,2018,2019,2021,2022)
# ---------------- Functions ------------------
pull_data <- function(years){
# returns a list of get_psrc_pums outputs, one for each year
lapply(years, function(x) get_psrc_pums(1, x, "h",c("HINCP")))
}
inc_clean_func <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = "MSA", rr=TRUE)
}
# pull the data
hh_inc <- pull_data(years)
hh_inc[[1]][["variables"]] <- hh_inc[[1]][["variables"]] %>%
mutate(hh_inc[[1]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
View(hh_inc)
# Summarize by income
hh_inc_all <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows) %>%
filter(MSA == "Seattle Tacoma Bellevue MSA")
View(hh_inc)
View(hh_inc)
hh_inc[[1]][["variables"]] <- hh_inc[[1]][["variables"]] %>%
mutate(hh_inc[[1]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
hh_inc[[2]][["variables"]] <- hh_inc[[2]][["variables"]] %>%
mutate(hh_inc[[2]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
hh_inc[[3]][["variables"]] <- hh_inc[[3]][["variables"]] %>%
mutate(hh_inc[[3]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
hh_inc[[4]][["variables"]] <- hh_inc[[4]][["variables"]] %>%
mutate(hh_inc[[4]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
hh_inc[[5]][["variables"]] <- hh_inc[[5]][["variables"]] %>%
mutate(hh_inc[[5]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
hh_inc[[6]][["variables"]] <- hh_inc[[6]][["variables"]] %>%
mutate(hh_inc[[6]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
hh_inc[[7]][["variables"]] <- hh_inc[[7]][["variables"]] %>%
mutate(hh_inc[[7]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
# Summarize by income
hh_inc_all <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows) %>%
filter(MSA == "Seattle Tacoma Bellevue MSA")
View(hh_inc_all)
devtools::install_github(“psrc/psrchousing”)
devtools::install_github("psrc/psrchousing")
# Import ---------------------
hu_raw <- ofm_county_housing_unit_data()
library(dplyr)
library(openxlsx)
library(tidyverse)
library(psrchousing)
export_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric01_pop_growth_hu_supply"
source_info <- c("OFM April 1 Population and Housing Estimates. Data representing 1980, 1990, 2000, 2010, 2020, 2024. Calculated by Eric Clute.")
years <- c(1980, 1990, 2000, 2010, 2020, 2024)
# Import ---------------------
hu_raw <- ofm_county_housing_unit_data()
View(hu_raw)
pop_raw <- ofm_county_population_data()
View(pop_raw)
# Clean up data, join ---------------------
hu <- hu_raw %>% filter(geography == "Region") %>% select(year, total) %>% rename(units = total)
pop <- pop_raw %>% filter(geography == "Region") %>% select(year, population)
analysis <- full_join(hu,pop, by = "year")
# Calculate change in pop, hu, and ratio ---------------------
analysis <- analysis %>%
filter(year %in% years) %>%
mutate(hu_change = units - lag(units),
pop_change = population - lag(population),
hu_pop_ratio = pop_change / hu_change)
View(analysis)
View(hu)
View(pop)
# Cleanup and export ---------------------
export_file <- paste0(export_path, "/metric01_raw.xlsx")
work_book <- createWorkbook()
addWorksheet(work_book, sheetName = "analysis")
writeData(work_book, sheet = "analysis", analysis)
writeData(work_book, sheet = "analysis", x = data.frame(source_info), startRow = nrow(analysis) + 3, startCol = 1)
saveWorkbook(work_book, file = export_file, overwrite = TRUE)
View(analysis)
library(ggplot2)
# Graph --------------------
ggplot(analysis, aes(x = year, y = Value, fill = Variable)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Population and Units per Decade", x = "Decade", y = "Values") +
scale_fill_manual(values = c("skyblue", "orange"))
# Graph --------------------
ggplot(analysis, aes(x = year, y = population, fill = Variable)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Population and Units per Decade", x = "Decade", y = "Values") +
scale_fill_manual(values = c("skyblue", "orange"))
# Graph --------------------
ggplot(analysis, aes(x = year, y = population, fill = units)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Population and Units per Decade", x = "Decade", y = "Values") +
scale_fill_manual(values = c("skyblue", "orange"))
pop <- pop_raw %>% filter(geography == "Region") %>% select(year, population) %>% select (-c(geography))
pop <- pop_raw %>% filter(geography == "Region") %>% select(year, population) %>% select -c(geography)
View(pop_raw)
View(pop)
pop <- pop %>% select(year, population)
pop <- pop_raw %>% filter(geography == "Region")
pop <- pop %>% select(year, population)
View(pop)
pop <- pop_raw %>% filter(geography == "Region") %>% select(year, population) %>% select(!geography)
pop <- pop_raw %>% filter(geography == "Region") %>% select(year, population) %>% !select(geography)
View(pop)
View(pop_raw)
pop <- pop_raw %>% filter(geography == "Region") %>% select(year, population) %>% select!(geography)
pop <- pop_raw %>% filter(geography == "Region") %>% select(!c(year, population))
View(pop)
# Clean up data, join ---------------------
hu <- hu_raw %>% filter(geography == "Region") %>% select(c(year, total)) %>% rename(units = total)
pop <- pop_raw %>% filter(geography == "Region") %>% select(c(year, population))
pop <- pop_raw %>% filter(geography == "Region") %>% ungroup() %>% select(c(year, population))
View(pop)
# Clean up data, join ---------------------
hu <- hu_raw %>% filter(geography == "Region") %>% select(c(geography, year, total)) %>% rename(units = total)
pop <- pop_raw %>% filter(geography == "Region") %>% ungroup() %>% select(c(year, population))
analysis <- full_join(hu,pop, by = "year")
View(analysis)
# Clean up data, join ---------------------
hu <- hu_raw %>% filter(geography == "Region") %>% select(year, total) %>% rename(units = total)
pop <- pop_raw %>% filter(geography == "Region") %>% select(year, population)
analysis <- full_join(hu,pop, by = "year")
# Import ---------------------
hu_raw <- ofm_county_housing_unit_data()
pop_raw <- ofm_county_population_data()
# Clean up data, join ---------------------
hu <- hu_raw %>% filter(geography == "Region") %>% select(year, total) %>% rename(units = total)
pop <- pop_raw %>% filter(geography == "Region") %>% select(year, population)
analysis <- full_join(hu,pop, by = "year")
analysis <- full_join(hu,pop, by = "year", unmatched = "drop")
analysis <- full_join(hu,pop, by = "year", keep = NULL)
View(analysis)
analysis <- left_join(hu,pop, by = "year")
pop <- pop_raw %>% filter(geography == "Region") %>% ungroup() %>% select(year, population)
analysis <- left_join(hu,pop, by = "year")
View(analysis)
# Calculate change in pop, hu, and ratio ---------------------
analysis <- analysis %>%
filter(year %in% years) %>%
mutate(hu_change = units - lag(units),
pop_change = population - lag(population),
hu_pop_ratio = pop_change / hu_change)
View(analysis)
View(hu)
export_file <- paste0(export_path, "/metric01_raw.xlsx")
work_book <- createWorkbook()
addWorksheet(work_book, sheetName = "analysis")
writeData(work_book, sheet = "analysis", analysis)
writeData(work_book, sheet = "analysis", x = data.frame(source_info), startRow = nrow(analysis) + 3, startCol = 1)
saveWorkbook(work_book, file = export_file, overwrite = TRUE)
