combined_data_piv$prct_change_rent <- (combined_data_piv[[ld]] - combined_data_piv[[ed]]) / combined_data_piv[[ed]]
combined_data_piv <- subset(-c(inflation_adjustment))
combined_data_piv <- subset(-c(combined_data_piv$inflation_adjustment))
# Summarize by Center
by_rgc <- combined_data_piv %>%
filter(type == "rgc") %>%
select(name, starts_with("Inventory Units_"), starts_with("Asking Rent Per Unit_"), prct_change_rent, type, county)
# Combine w/reference table
combined_data_piv <- left_join(combined_data_piv, reference_table, by = "name")
# Summarize by Center
by_rgc <- combined_data_piv %>%
filter(type == "rgc") %>%
select(name, starts_with("Inventory Units_"), starts_with("Asking Rent Per Unit_"), prct_change_rent, type, county)
View(by_rgc)
# Processing Raw CoStar Data for Housing Monitoring
# Geographies: RGCs, HCTs, Counties
# Data Vintage: Q2 2024 QTD
# Created By: Eric Clute
# Assumptions ---------------------
library(readxl)
library(dplyr)
library(purrr)
library(openxlsx)
library(tidyr)
library(fredr) # Requires API key
library(psrccensus) # Required for inflation adjustment
fredr_set_key("99e2d81f189630d83b9e37ba8ca4f142")
rgc_data_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric18_avg_asking_rent/raw_rgc"
hct_data_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric18_avg_asking_rent/raw_hct"
county_data_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric18_avg_asking_rent/raw_county"
reference_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric18_avg_asking_rent/reference_table.xlsx"
export_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric18_avg_asking_rent"
rgc_source_info <- c("CoStar, Q2 2024 QTD. Calculated by Eric Clute, 6/27/2024. Includes all 1-bedroom unit data inside RGC (excludes Federal Way, Issaquah due to missing data). Rent rounded to nearest 10")
hct_source_info <- c("CoStar, Q2 2024 QTD. Calculated by Eric Clute, 6/27/2024. Includes all 1-bedroom unit data inside HCT (excludes Port Orchard Ferry Terminal, Poulsbo, Mukilteo due to missing data). Rent rounded to nearest 10")
county_source_info <- c("CoStar, Q2 2024 QTD. Calculated by Eric Clute, 6/27/2024. Includes all 1-bedroom unit data inside county. Rent rounded to nearest 10")
latestdate <- "2024 Q2 QTD"
earliestdate <- "2019 Q2"
inflation_year <- (2024)
reported_year_to_adjust <- (2019)
reference_table <- read_excel(reference_path)
# Create Functions ---------------------
# Function to read Excel file, extract column names and first row, and add filename as a column
read_excel_with_filename <- function(file_path) {
# Read Excel file
data <- read_excel(file_path)
# Extract column names and first row of data
col_names <- colnames(data)
first_row <- slice(data, which(data$Period %in% c(latestdate, earliestdate)))
# Add filename as a column without the .xlsx extension
filename <- gsub("\\.xlsx$", "", basename(file_path))
first_row$name <- filename
# Convert all columns to character type
first_row <- mutate_all(first_row, as.character)
# Return a list containing column names, first row of data, and filename
list(col_names = col_names, first_row = first_row)
}
# Function to combine data from each Excel file into one data frame
combine_data <- function(data_list) {
result <- combined_data
for (i in seq_along(data_list)) {
filename <- gsub("\\.xlsx$", "", basename(xlsx_files[i]))
data_list[[i]]$first_row$name <- filename
# Convert all columns to character type
data_list[[i]]$first_row <- mutate_all(data_list[[i]]$first_row, as.character)
result <- bind_rows(result, data_list[[i]]$first_row)
}
result
}
# Combine RGC files Together  ---------------------
xlsx_files <- list.files(rgc_data_path, pattern = "\\.xlsx$", full.names = TRUE) # Get a list of all Excel files in the folder
excel_data <- map(xlsx_files, read_excel_with_filename) # Read all Excel files
all_col_names <- excel_data %>% map("col_names") %>% reduce(union) # Combine all column names into one vector
combined_data <- tibble::tibble(!!!set_names(rep(list(NULL), length(all_col_names)), all_col_names)) # Create an empty data frame with all column names
# Call the function to combine data from all Excel files
combined_data <- combine_data(excel_data)
rgc_data <- combined_data
# Combine HCT files Together  ---------------------
xlsx_files <- list.files(hct_data_path, pattern = "\\.xlsx$", full.names = TRUE) # Get a list of all Excel files in the folder
excel_data <- map(xlsx_files, read_excel_with_filename) # Read all Excel files
all_col_names <- excel_data %>% map("col_names") %>% reduce(union) # Combine all column names into one vector
combined_data <- tibble::tibble(!!!set_names(rep(list(NULL), length(all_col_names)), all_col_names)) # Create an empty data frame with all column names
# Call the function to combine data from all Excel files
combined_data <- combine_data(excel_data)
hct_data <- combined_data
# Combine county files Together  ---------------------
xlsx_files <- list.files(county_data_path, pattern = "\\.xlsx$", full.names = TRUE) # Get a list of all Excel files in the folder
excel_data <- map(xlsx_files, read_excel_with_filename) # Read all Excel files
all_col_names <- excel_data %>% map("col_names") %>% reduce(union) # Combine all column names into one vector
combined_data <- tibble::tibble(!!!set_names(rep(list(NULL), length(all_col_names)), all_col_names)) # Create an empty data frame with all column names
# Call the function to combine data from all Excel files
combined_data <- combine_data(excel_data)
county_data <- combined_data
combined_data <- rbind(rgc_data, hct_data, county_data)
# Formatting & Calculating New Fields ---------------------
# Remove unneeded fields
combined_data <- combined_data %>%
select(name, Period, `Inventory Units`, `Asking Rent Per Unit`)
# Cleanup
combined_data$`Asking Rent Per Unit` <- as.numeric(combined_data$`Asking Rent Per Unit`)
combined_data$`Inventory Units` <- as.numeric((combined_data$`Inventory Units`))
combined_data$`Asking Rent Per Unit` <- round(combined_data$`Asking Rent Per Unit` / 10) * 10
# Remove with less than 50 units
removed <- subset(combined_data, `Inventory Units` < 50)
combined_data <- subset(combined_data, `Inventory Units` >= 50)
# Pivot & calculate change over time (adjust for inflation)
combined_data_piv <- combined_data %>% pivot_wider(id_cols = 'name', names_from = 'Period', values_from = c('Inventory Units', 'Asking Rent Per Unit'))
combined_data_piv$inflation_adjustment <- pce_deflator(reported_year_to_adjust, inflation_year) # create inflation percentage
ed <- paste0("Asking Rent Per Unit_", earliestdate) # Construct the field name dynamically
ld <- paste0("Asking Rent Per Unit_", latestdate) # Construct the field name dynamically
combined_data_piv[[ed]] <- combined_data_piv[[ed]] * combined_data_piv$inflation_adjustment
combined_data_piv$prct_change_rent <- (combined_data_piv[[ld]] - combined_data_piv[[ed]]) / combined_data_piv[[ed]]
# Combine w/reference table
combined_data_piv <- left_join(combined_data_piv, reference_table, by = "name")
View(combined_data_piv)
library(readxl)
library(dplyr)
library(purrr)
library(openxlsx)
library(tidyr)
library(fredr) # Requires API key
library(psrccensus) # Required for inflation adjustment
fredr_set_key("99e2d81f189630d83b9e37ba8ca4f142")
rgc_data_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric18_avg_asking_rent/raw_rgc"
hct_data_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric18_avg_asking_rent/raw_hct"
county_data_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric18_avg_asking_rent/raw_county"
reference_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric18_avg_asking_rent/reference_table.xlsx"
export_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric18_avg_asking_rent"
rgc_source_info <- c("CoStar, Q2 2024 QTD. Calculated by Eric Clute, 6/27/2024. Includes all 1-bedroom unit data inside RGC (excludes Federal Way, Issaquah due to missing data). Rent rounded to nearest 10")
hct_source_info <- c("CoStar, Q2 2024 QTD. Calculated by Eric Clute, 6/27/2024. Includes all 1-bedroom unit data inside HCT (excludes Port Orchard Ferry Terminal, Poulsbo, Mukilteo due to missing data). Rent rounded to nearest 10")
county_source_info <- c("CoStar, Q2 2024 QTD. Calculated by Eric Clute, 6/27/2024. Includes all 1-bedroom unit data inside county. Rent rounded to nearest 10")
latestdate <- "2024 Q2 QTD"
earliestdate <- "2019 Q2"
inflation_year <- (2024)
reported_year_to_adjust <- (2019)
reference_table <- read_excel(reference_path)
# Create Functions ---------------------
# Function to read Excel file, extract column names and first row, and add filename as a column
read_excel_with_filename <- function(file_path) {
# Read Excel file
data <- read_excel(file_path)
# Extract column names and first row of data
col_names <- colnames(data)
first_row <- slice(data, which(data$Period %in% c(latestdate, earliestdate)))
# Add filename as a column without the .xlsx extension
filename <- gsub("\\.xlsx$", "", basename(file_path))
first_row$name <- filename
# Convert all columns to character type
first_row <- mutate_all(first_row, as.character)
# Return a list containing column names, first row of data, and filename
list(col_names = col_names, first_row = first_row)
}
# Function to combine data from each Excel file into one data frame
combine_data <- function(data_list) {
result <- combined_data
for (i in seq_along(data_list)) {
filename <- gsub("\\.xlsx$", "", basename(xlsx_files[i]))
data_list[[i]]$first_row$name <- filename
# Convert all columns to character type
data_list[[i]]$first_row <- mutate_all(data_list[[i]]$first_row, as.character)
result <- bind_rows(result, data_list[[i]]$first_row)
}
result
}
# Combine RGC files Together  ---------------------
xlsx_files <- list.files(rgc_data_path, pattern = "\\.xlsx$", full.names = TRUE) # Get a list of all Excel files in the folder
excel_data <- map(xlsx_files, read_excel_with_filename) # Read all Excel files
all_col_names <- excel_data %>% map("col_names") %>% reduce(union) # Combine all column names into one vector
combined_data <- tibble::tibble(!!!set_names(rep(list(NULL), length(all_col_names)), all_col_names)) # Create an empty data frame with all column names
# Call the function to combine data from all Excel files
combined_data <- combine_data(excel_data)
rgc_data <- combined_data
# Combine HCT files Together  ---------------------
xlsx_files <- list.files(hct_data_path, pattern = "\\.xlsx$", full.names = TRUE) # Get a list of all Excel files in the folder
excel_data <- map(xlsx_files, read_excel_with_filename) # Read all Excel files
all_col_names <- excel_data %>% map("col_names") %>% reduce(union) # Combine all column names into one vector
combined_data <- tibble::tibble(!!!set_names(rep(list(NULL), length(all_col_names)), all_col_names)) # Create an empty data frame with all column names
# Call the function to combine data from all Excel files
combined_data <- combine_data(excel_data)
hct_data <- combined_data
# Combine county files Together  ---------------------
xlsx_files <- list.files(county_data_path, pattern = "\\.xlsx$", full.names = TRUE) # Get a list of all Excel files in the folder
excel_data <- map(xlsx_files, read_excel_with_filename) # Read all Excel files
all_col_names <- excel_data %>% map("col_names") %>% reduce(union) # Combine all column names into one vector
combined_data <- tibble::tibble(!!!set_names(rep(list(NULL), length(all_col_names)), all_col_names)) # Create an empty data frame with all column names
# Call the function to combine data from all Excel files
combined_data <- combine_data(excel_data)
county_data <- combined_data
combined_data <- rbind(rgc_data, hct_data, county_data)
# Formatting & Calculating New Fields ---------------------
# Remove unneeded fields
combined_data <- combined_data %>%
select(name, Period, `Inventory Units`, `Asking Rent Per Unit`)
# Cleanup
combined_data$`Asking Rent Per Unit` <- as.numeric(combined_data$`Asking Rent Per Unit`)
combined_data$`Inventory Units` <- as.numeric((combined_data$`Inventory Units`))
combined_data$`Asking Rent Per Unit` <- round(combined_data$`Asking Rent Per Unit` / 10) * 10
# Remove with less than 50 units
removed <- subset(combined_data, `Inventory Units` < 50)
combined_data <- subset(combined_data, `Inventory Units` >= 50)
# Pivot & calculate change over time (adjust for inflation)
combined_data_piv <- combined_data %>% pivot_wider(id_cols = 'name', names_from = 'Period', values_from = c('Inventory Units', 'Asking Rent Per Unit'))
combined_data_piv$inflation_adjustment <- pce_deflator(reported_year_to_adjust, inflation_year) # create inflation percentage
ed <- paste0("Asking Rent Per Unit_", earliestdate) # Construct the field name dynamically
ld <- paste0("Asking Rent Per Unit_", latestdate) # Construct the field name dynamically
View(combined_data_piv)
ed <- paste0("Asking Rent Per Unit_", earliestdate) # Construct the field name dynamically
ld <- paste0("Asking Rent Per Unit_", latestdate) # Construct the field name dynamically
combined_data_piv[[ed]] <- combined_data_piv[[ed]] * combined_data_piv$inflation_adjustment
combined_data_piv$prct_change_rent <- (combined_data_piv[[ld]] - combined_data_piv[[ed]]) / combined_data_piv[[ed]]
# Combine w/reference table
combined_data_piv <- left_join(combined_data_piv, reference_table, by = "name")
# Summarize by Center
by_rgc <- combined_data_piv %>%
filter(type == "rgc") %>%
select(name, starts_with("Inventory Units_"), combined_data_piv[[ed]], prct_change_rent, type, county)
# Summarize by Center
by_rgc <- combined_data_piv %>%
filter(type == "rgc") %>%
select(name, starts_with("Inventory Units_"), combined_data_piv[[ld]], prct_change_rent, type, county)
View(combined_data_piv)
# Combine w/reference table
combined_data_piv <- left_join(combined_data_piv, reference_table, by = "name")
# Summarize by Center
by_rgc <- combined_data_piv %>%
filter(type == "rgc") %>%
select(name, starts_with("Inventory Units_"), starts_with("Asking Rent Per Unit_"), prct_change_rent, type, county)
# Combine w/reference table
combined_data_piv <- left_join(combined_data_piv, reference_table, by = "name")
# Summarize by Center
by_rgc <- combined_data_piv %>%
filter(type == "rgc") %>%
select(name, starts_with("Inventory Units_"), starts_with("Asking Rent Per Unit_"), prct_change_rent, type, county)
View(by_rgc)
# Summarize by Center
by_hct <- combined_data_piv %>%
filter(type == "hct") %>%
select(name, starts_with("Inventory Units_"), starts_with("Asking Rent Per Unit_"), prct_change_rent, type, county)
# Summarize by Center
by_county <- combined_data_piv %>%
filter(is.na(type)) %>%
select(name, starts_with("Inventory Units_"), starts_with("Asking Rent Per Unit_"), prct_change_rent, type, county)
View(by_hct)
View(by_county)
View(combined_data)
export_file <- paste0(export_path, "/metric18_raw_1bdrm.xlsx")
work_book <- createWorkbook()
# Add the "by_rgc" sheet
addWorksheet(work_book, sheetName = "by_rgc")
writeData(work_book, sheet = "by_rgc", by_rgc)
writeData(work_book, sheet = "by_rgc", x = data.frame(rgc_source_info), startRow = nrow(by_rgc) + 3, startCol = 1)
# Add the "by_hct" sheet
addWorksheet(work_book, sheetName = "by_hct")
writeData(work_book, sheet = "by_hct", by_hct)
writeData(work_book, sheet = "by_hct", x = data.frame(hct_source_info), startRow = nrow(by_hct) + 3, startCol = 1)
# Add the "by_county" sheet
addWorksheet(work_book, sheetName = "by_county")
writeData(work_book, sheet = "by_county", by_county)
writeData(work_book, sheet = "by_county", x = data.frame(county_source_info), startRow = nrow(by_county) + 3, startCol = 1)
saveWorkbook(work_book, file = export_file, overwrite = TRUE)
library(readxl)
library(dplyr)
library(purrr)
library(openxlsx)
library(tidyr)
library(fredr) # Requires API key
library(psrccensus) # Required for inflation adjustment
fredr_set_key("99e2d81f189630d83b9e37ba8ca4f142")
rgc_data_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric18_avg_asking_rent/raw_rgc"
hct_data_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric18_avg_asking_rent/raw_hct"
county_data_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric18_avg_asking_rent/raw_county"
reference_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric18_avg_asking_rent/reference_table.xlsx"
export_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric18_avg_asking_rent"
rgc_source_info <- c("CoStar, Q2 2024 QTD. Calculated by Eric Clute, 7/12/2024. Includes all 1-bedroom unit data inside RGC (excludes Federal Way, Issaquah due to missing data). Rent rounded to nearest 10. Inflation adjusted to 2024 dollars.")
hct_source_info <- c("CoStar, Q2 2024 QTD. Calculated by Eric Clute, 7/12/2024. Includes all 1-bedroom unit data inside HCT (excludes Port Orchard Ferry Terminal, Poulsbo, Mukilteo due to missing data). Rent rounded to nearest 10. Inflation adjusted to 2024 dollars.")
county_source_info <- c("CoStar, Q2 2024 QTD. Calculated by Eric Clute, 7/12/2024. Includes all 1-bedroom unit data inside county. Rent rounded to nearest 10. Inflation adjusted to 2024 dollars.")
latestdate <- "2024 Q2 QTD"
earliestdate <- "2019 Q2"
inflation_year <- (2024)
reported_year_to_adjust <- (2019)
reference_table <- read_excel(reference_path)
# Processing Raw CoStar Data for Housing Monitoring
# Geographies: RGCs, HCTs, Counties
# Data Vintage: Q2 2024 QTD
# Created By: Eric Clute
# Assumptions ---------------------
library(readxl)
library(dplyr)
library(purrr)
library(openxlsx)
library(tidyr)
library(fredr) # Requires API key
library(psrccensus) # Required for inflation adjustment
fredr_set_key("99e2d81f189630d83b9e37ba8ca4f142")
rgc_data_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric18_avg_asking_rent/raw_rgc"
hct_data_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric18_avg_asking_rent/raw_hct"
county_data_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric18_avg_asking_rent/raw_county"
reference_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric18_avg_asking_rent/reference_table.xlsx"
export_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric18_avg_asking_rent"
rgc_source_info <- c("CoStar, Q2 2024 QTD. Calculated by Eric Clute, 7/12/2024. Includes all 1-bedroom unit data inside RGC (excludes Federal Way, Issaquah due to missing data). Rent rounded to nearest 10. Inflation adjusted to 2024 dollars.")
hct_source_info <- c("CoStar, Q2 2024 QTD. Calculated by Eric Clute, 7/12/2024. Includes all 1-bedroom unit data inside HCT (excludes Port Orchard Ferry Terminal, Poulsbo, Mukilteo due to missing data). Rent rounded to nearest 10. Inflation adjusted to 2024 dollars.")
county_source_info <- c("CoStar, Q2 2024 QTD. Calculated by Eric Clute, 7/12/2024. Includes all 1-bedroom unit data inside county. Rent rounded to nearest 10. Inflation adjusted to 2024 dollars.")
latestdate <- "2024 Q2 QTD"
earliestdate <- "2019 Q2"
inflation_year <- (2024)
reported_year_to_adjust <- (2019)
reference_table <- read_excel(reference_path)
# Create Functions ---------------------
# Function to read Excel file, extract column names and first row, and add filename as a column
read_excel_with_filename <- function(file_path) {
# Read Excel file
data <- read_excel(file_path)
# Extract column names and first row of data
col_names <- colnames(data)
first_row <- slice(data, which(data$Period %in% c(latestdate, earliestdate)))
# Add filename as a column without the .xlsx extension
filename <- gsub("\\.xlsx$", "", basename(file_path))
first_row$name <- filename
# Convert all columns to character type
first_row <- mutate_all(first_row, as.character)
# Return a list containing column names, first row of data, and filename
list(col_names = col_names, first_row = first_row)
}
# Function to combine data from each Excel file into one data frame
combine_data <- function(data_list) {
result <- combined_data
for (i in seq_along(data_list)) {
filename <- gsub("\\.xlsx$", "", basename(xlsx_files[i]))
data_list[[i]]$first_row$name <- filename
# Convert all columns to character type
data_list[[i]]$first_row <- mutate_all(data_list[[i]]$first_row, as.character)
result <- bind_rows(result, data_list[[i]]$first_row)
}
result
}
# Combine RGC files Together  ---------------------
xlsx_files <- list.files(rgc_data_path, pattern = "\\.xlsx$", full.names = TRUE) # Get a list of all Excel files in the folder
excel_data <- map(xlsx_files, read_excel_with_filename) # Read all Excel files
all_col_names <- excel_data %>% map("col_names") %>% reduce(union) # Combine all column names into one vector
combined_data <- tibble::tibble(!!!set_names(rep(list(NULL), length(all_col_names)), all_col_names)) # Create an empty data frame with all column names
# Call the function to combine data from all Excel files
combined_data <- combine_data(excel_data)
rgc_data <- combined_data
# Combine HCT files Together  ---------------------
xlsx_files <- list.files(hct_data_path, pattern = "\\.xlsx$", full.names = TRUE) # Get a list of all Excel files in the folder
excel_data <- map(xlsx_files, read_excel_with_filename) # Read all Excel files
all_col_names <- excel_data %>% map("col_names") %>% reduce(union) # Combine all column names into one vector
combined_data <- tibble::tibble(!!!set_names(rep(list(NULL), length(all_col_names)), all_col_names)) # Create an empty data frame with all column names
# Call the function to combine data from all Excel files
combined_data <- combine_data(excel_data)
hct_data <- combined_data
# Combine county files Together  ---------------------
xlsx_files <- list.files(county_data_path, pattern = "\\.xlsx$", full.names = TRUE) # Get a list of all Excel files in the folder
excel_data <- map(xlsx_files, read_excel_with_filename) # Read all Excel files
all_col_names <- excel_data %>% map("col_names") %>% reduce(union) # Combine all column names into one vector
combined_data <- tibble::tibble(!!!set_names(rep(list(NULL), length(all_col_names)), all_col_names)) # Create an empty data frame with all column names
# Call the function to combine data from all Excel files
combined_data <- combine_data(excel_data)
county_data <- combined_data
combined_data <- rbind(rgc_data, hct_data, county_data)
# Formatting & Calculating New Fields ---------------------
# Remove unneeded fields
combined_data <- combined_data %>%
select(name, Period, `Inventory Units`, `Asking Rent Per Unit`)
# Cleanup
combined_data$`Asking Rent Per Unit` <- as.numeric(combined_data$`Asking Rent Per Unit`)
combined_data$`Inventory Units` <- as.numeric((combined_data$`Inventory Units`))
combined_data$`Asking Rent Per Unit` <- round(combined_data$`Asking Rent Per Unit` / 10) * 10
# Remove with less than 50 units
removed <- subset(combined_data, `Inventory Units` < 50)
combined_data <- subset(combined_data, `Inventory Units` >= 50)
# Pivot & calculate change over time (adjust for inflation)
combined_data_piv <- combined_data %>% pivot_wider(id_cols = 'name', names_from = 'Period', values_from = c('Inventory Units', 'Asking Rent Per Unit'))
combined_data_piv$inflation_adjustment <- pce_deflator(reported_year_to_adjust, inflation_year) # create inflation percentage
ed <- paste0("Asking Rent Per Unit_", earliestdate) # Construct the field name dynamically
ld <- paste0("Asking Rent Per Unit_", latestdate) # Construct the field name dynamically
combined_data_piv[[ed]] <- combined_data_piv[[ed]] * combined_data_piv$inflation_adjustment
combined_data_piv$prct_change_rent <- (combined_data_piv[[ld]] - combined_data_piv[[ed]]) / combined_data_piv[[ed]]
# Combine w/reference table
combined_data_piv <- left_join(combined_data_piv, reference_table, by = "name")
# Summarize by various geos ---------------------
# Summarize by Center
by_rgc <- combined_data_piv %>%
filter(type == "rgc") %>%
select(name, starts_with("Inventory Units_"), starts_with("Asking Rent Per Unit_"), prct_change_rent, type, county)
# Summarize by Center
by_hct <- combined_data_piv %>%
filter(type == "hct") %>%
select(name, starts_with("Inventory Units_"), starts_with("Asking Rent Per Unit_"), prct_change_rent, type, county)
# Summarize by Center
by_county <- combined_data_piv %>%
filter(is.na(type)) %>%
select(name, starts_with("Inventory Units_"), starts_with("Asking Rent Per Unit_"), prct_change_rent, type, county)
# Cleanup and export ---------------------
# Export Data
export_file <- paste0(export_path, "/metric18_raw_1bdrm.xlsx")
work_book <- createWorkbook()
# Add the "by_rgc" sheet
addWorksheet(work_book, sheetName = "by_rgc")
writeData(work_book, sheet = "by_rgc", by_rgc)
writeData(work_book, sheet = "by_rgc", x = data.frame(rgc_source_info), startRow = nrow(by_rgc) + 3, startCol = 1)
# Add the "by_hct" sheet
addWorksheet(work_book, sheetName = "by_hct")
writeData(work_book, sheet = "by_hct", by_hct)
writeData(work_book, sheet = "by_hct", x = data.frame(hct_source_info), startRow = nrow(by_hct) + 3, startCol = 1)
# Add the "by_county" sheet
addWorksheet(work_book, sheetName = "by_county")
writeData(work_book, sheet = "by_county", by_county)
writeData(work_book, sheet = "by_county", x = data.frame(county_source_info), startRow = nrow(by_county) + 3, startCol = 1)
saveWorkbook(work_book, file = export_file, overwrite = TRUE)
library(openxlsx)
library(tidyr)
library(tidyverse)
library(stringr)
library(dplyr)
library(psrccensus)
library(magrittr)
library(ggplot2)
# assumptions
metro_area <- "Seattle, WA"
earliestdate <- "2012-06-30"
latestdate <- "2024-06-30"
smalltbl_earliestdate <- "2021-06-30"
smalltbl_latestdate <- "2024-06-30"
term <- 360                     # 30 year mortgage
downpayment <- 0.20             # JCHS report used 3.5% but I will use 20% given our market conditions
propertytax <- 0.01             # King County is 1%, Snohomish County is 0.89%
propertyins <- 0.0035           # same as JCHS
mortgageins <- 0.00             # set to 0 for 20% downpayment
maxdebttoincome <- 0.31         # same as JCHS
interest_url <- "https://www.freddiemac.com/pmms/docs/historicalweeklydata.xlsx"
ZHVI_url <- "https://files.zillowstatic.com/research/public_csvs/zhvi/Metro_zhvi_uc_sfrcondo_tier_0.33_0.67_sm_sa_month.csv"
ZORI_url <- "https://files.zillowstatic.com/research/public_csvs/zori/Metro_zori_uc_sfrcondomfr_sm_sa_month.csv?t=1711667054"
# ZORI: Zillow Observed Rent Index - All Homes + Multifamily, Smoothed, Seasonally-Adjusted
# ZHVI: Zillow Home Value Index - All Homes (SFR & Condo) Time series, Smoothed, Seasonally-Adjusted
# ---------------- Mortgage Rate DATA ----------------
# download Mortgage Rate data from FreddieMac site
int_raw = read.xlsx(interest_url, sheet=1)
# clean up table
int <- int_raw[-(1:4),]
int <- subset(int, select = c(X1, X2))
# clean up data
int$X1 <- convertToDate(int$X1)
int$X2 <- as.numeric(int$X2)
int <- int[!is.na(int$X2),]
int <- int %>%
rename("int_date" = "X1") %>%
rename("int_rate" = "X2")
# refine dates
int <- with(int, int[(int_date >= earliestdate & int_date <= latestdate), ])
int$month <- str_sub(int$int_date, 1, 7)
int <- int[!duplicated(int$month), ]
# ---------------- ZILLOW DATA ----------------
ZORI_raw = read.csv(ZORI_url)
ZHVI_raw = read.csv(ZHVI_url)
# Clean data
ZORI <- subset(ZORI_raw, ZORI_raw$RegionName == metro_area)
ZHVI <- subset(ZHVI_raw, ZHVI_raw$RegionName == metro_area)
colnames(ZORI)<-gsub("X","",colnames(ZORI))
colnames(ZHVI)<-gsub("X","",colnames(ZHVI))
ZORI_long <- ZORI %>% select(starts_with("20"))
ZORI_long %<>% pivot_longer(everything(), names_to = "date", values_to = "zori_rent")
ZORI_long$month <- str_sub(ZORI_long$date, 1, 7)
ZORI_long$month <- gsub("\\.", "-", ZORI_long$month)
ZORI_long  %<>% relocate(month, .before = date)
ZORI_long$date <- gsub("\\.", "-", ZORI_long$date)
ZHVI_long <- ZHVI %>% select(starts_with("20"))
ZHVI_long %<>% pivot_longer(everything(), names_to = "date", values_to = "zhvi_value")
ZHVI_long$month <- str_sub(ZHVI_long$date, 1, 7)
ZHVI_long$month <- gsub("\\.", "-", ZHVI_long$month)
ZHVI_long  %<>% relocate(month, .before = date)
ZHVI_long <- subset(ZHVI_long, select = -c(date))
zillow <- merge(ZHVI_long, ZORI_long, by= "month")
# ---------------- JOIN DATA & ANALYZE ----------------
# crunch monthly payment, required income
analysis <- zillow %>% left_join(int)
analysis <- na.omit(analysis)
analysis$date <- as.Date(analysis$date)
analysis$mthlyrate <- analysis$int_rate / 100 / 12
analysis$r <- (1 + analysis$mthlyrate) ^ term - 1
analysis$loan_amt = analysis$zhvi_value - (downpayment * analysis$zhvi_value)
analysis$propertytax_mnthlypymt = analysis$loan_amt * propertytax / 12
analysis$propertyins_mnthlypymt = analysis$loan_amt * propertyins / 12
analysis$mortgageins_mnthlypymt = analysis$loan_amt * mortgageins / 12
analysis$payment = analysis$loan_amt * analysis$mthlyrate * ((analysis$r + 1) / analysis$r) + (analysis$propertytax_mnthlypymt + analysis$propertyins_mnthlypymt + analysis$mortgageins_mnthlypymt)
analysis$reqincome = (analysis$payment / maxdebttoincome) * 12
# ---------------- SMALL TABLE FOR EXPORT ----------------
smalltbl <- with(analysis, analysis[(date >= smalltbl_earliestdate & date <= smalltbl_latestdate), ])
smalltbl <- subset(smalltbl, str_sub(smalltbl$date, -5,-4) == str_sub(smalltbl_earliestdate, -5,-4))
smalltbl <- subset(smalltbl, select = c(date, int_rate, zhvi_value, payment, reqincome))
smalltbl <- smalltbl %>% arrange(ymd(smalltbl$date))
# ---------------- GRAPHING ----------------
reqincome_vs_int_plot <- ggplot(analysis)  +
geom_bar(aes(x=date, y=int_rate*20000),stat="identity", fill="skyblue2",colour="#ffffff")+
geom_line(aes(x=date, y=reqincome),stat="identity",color="grey40", linewidth=1)+
labs(title= paste(metro_area, "MSA - Mortgage for Median Home"),
x="Year",y="Minimum Income Required ($)") +
scale_y_continuous(labels=function(x) format(x, big.mark = ",", scientific = FALSE),sec.axis=sec_axis(~.*0.00005,name="Mortgage Rate (%)")) +
scale_x_date(breaks = scales::breaks_width("1 year"),minor_breaks = scales::breaks_width("1 year")) +
theme(text = element_text(size = 20))
reqincome_vs_int_plot
mortgage_vs_rent_plot <- ggplot(analysis)  +
geom_line(aes(x=date, y=payment),stat="identity",color="grey40", linewidth=1)+
geom_line(aes(x=date, y=zori_rent),stat="identity",color="skyblue2", linewidth=1)+
labs(title= paste(metro_area, "MSA - Mortgage vs Median Rent"),
x="Year",y="Monthly Payment ($)") +
scale_y_continuous(labels=function(x) format(x, big.mark = ",", scientific = FALSE),expand = c(0, 0), limits = c(0, NA)) +
scale_x_date(breaks = scales::breaks_width("1 year"),minor_breaks = scales::breaks_width("1 year")) +
theme(text = element_text(size = 20))
mortgage_vs_rent_plot
View(smalltbl)
View(reqincome_vs_int_plot)
View(reqincome_vs_int_plot[["data"]])
