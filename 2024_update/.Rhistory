}
combine_reduce <- function(rent_raw){
rent_raw <- rent_raw %>% filter(`variable` == 'DP04_0134')
}
# PROCESSING
# pull the data
rent_raw <- pull_data(year)
library(psrccensus)
library(magrittr)
library(purrr)
library(dplyr)
year <- c(2015,2016,2017,2018,2019,2020,2021,2022,2023)
# FUNCTIONS
# ---- Pull PUMS data
pull_data <- function(years){
# returns a list of get_psrc_pums outputs, one for each year
lapply(years, function(x) get_acs_recs(geography = 'county',
table.names = c('DP04'),
years = x,
counties = c("King", "Kitsap", "Pierce", "Snohomish"),
acs.type = 'acs1'))
}
combine_reduce <- function(rent_raw){
rent_raw <- rent_raw %>% filter(`variable` == 'DP04_0134')
}
# PROCESSING
# pull the data
rent_raw <- pull_data(year)
# ASSUMPTIONS
library(psrccensus)
library(magrittr)
library(purrr)
library(dplyr)
year <- c(2015,2016,2017,2018,2019,2021,2022,2023)
# FUNCTIONS
# ---- Pull PUMS data
pull_data <- function(years){
# returns a list of get_psrc_pums outputs, one for each year
lapply(years, function(x) get_acs_recs(geography = 'county',
table.names = c('DP04'),
years = x,
counties = c("King", "Kitsap", "Pierce", "Snohomish"),
acs.type = 'acs1'))
}
combine_reduce <- function(rent_raw){
rent_raw <- rent_raw %>% filter(`variable` == 'DP04_0134')
}
# PROCESSING
# pull the data
rent_raw <- pull_data(year)
# Grab gross median rent and combine all years
rent_all <- map(rent_raw, ~combine_reduce(.x)) %>%
reduce(bind_rows)
View(rent_all)
View(rent_all)
# CLEAN UP
# Reduce unneeded columns
rent_all <- rent_all %>% select(name, estimate, moe, label, acs_type, year, se, cv, reliability)
View(rent_all)
library(dplyr)
library(openxlsx)
library(tidyverse)
library(psrchousing)
export_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric01_pop_growth_hu_supply"
source_info <- c("OFM April 1 Population and Housing Estimates. Data representing 1980, 1990, 2000, 2010, 2020, 2024. Calculated by Eric Clute.")
years <- c(1980, 1990, 2000, 2010, 2020, 2024)
# Import ---------------------
hu_raw <- ofm_county_housing_unit_data()
pop_raw <- ofm_county_population_data()
# Clean up data, join ---------------------
hu <- hu_raw %>% filter(geography == "Region") %>% select(year, total) %>% rename(units = total)
pop <- pop_raw %>% filter(geography == "Region") %>% ungroup() %>% select(year, population)
analysis <- left_join(hu,pop, by = "year")
View(analysis)
# Assumptions ---------------------
library(dplyr)
library(openxlsx)
library(tidyverse)
library(psrchousing)
export_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric01_pop_growth_hu_supply"
source_info <- c("OFM April 1 Population and Housing Estimates. Data representing 1980, 1990, 2000, 2010, 2020, 2024. Calculated by Eric Clute.")
years <- c(1980, 1990, 2000, 2010, 2020, 2024)
# Import ---------------------
hu_raw <- ofm_county_housing_unit_data()
pop_raw <- ofm_county_population_data()
View(pop_raw)
View(hu_raw)
library(dplyr)
library(openxlsx)
library(tidyverse)
library(psrchousing)
export_path <- "H:/Projects/2024/Regional Data Profile Update"
source_info <- c("OFM April 1 Population and Housing Estimates. Data representing 2000 thru 2024. Calculated by Eric Clute.")
years <- c(2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024)
# Import ---------------------
hu_raw <- ofm_county_housing_unit_data()
View(hu_raw)
# CHART #1 - Housing Units by County ---------------------
chart_1 <- hu_raw %>%
filter(year %in% years) %>%
select(year, geography, sf, mf, mh, total)
View(chart_1)
# Crunching housing data for Regional Data Profile
# Geographies: Region & Counties
# Data Vintage: 2024 OFM April 1 estimates
# Created By: Eric Clute
# Assumptions ---------------------
library(dplyr)
library(openxlsx)
library(tidyverse)
library(psrchousing)
export_path <- "H:/Projects/2024/Regional Data Profile Update"
source_info <- c("OFM April 1 Population and Housing Estimates. Data representing 2000 thru 2024. Calculated by Eric Clute.")
years <- c(2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024)
# Import & Clean ---------------------
hu_raw <- ofm_county_housing_unit_data()
hu <- hu_raw %>%
filter(year %in% years) %>%
select(year, geography, sf, mf, mh, total)
View(hu)
# CHART #1 - Housing Units by County ---------------------
chart_1 <- hu %>%
select(year, geography, total)
View(chart_1)
# CHART #1 - Housing Units by County ---------------------
chart_1 <- hu %>%
select(year, geography, total) %>%
pivot_wider(names_from = geography, values_from = total)
View(chart_1)
View(hu)
# CHART #2 - Housing Units by Structure Type ---------------------
chart_2 <- hu %>%
filter(year = 2000 | year = 2010 | year = 2020 | year = 2024)
# CHART #2 - Housing Units by Structure Type ---------------------
chart_2 <- hu %>%
filter(year = '2000' | year = '2010' | year = '2020' | year = '2024')
decade_years <- c(2000, 2010, 2020, 2024)
# CHART #2 - Housing Units by Structure Type ---------------------
chart_2 <- hu %>%
filter(year %in% decade_years)
View(chart_2)
# CHART #2 - Housing Units by Structure Type ---------------------
chart_2 <- hu %>%
filter(year %in% decade_years) %>%
filter(geography == "Region")
View(chart_2)
View(chart_1)
# Assumptions ---------------------
library(dplyr)
library(openxlsx)
library(tidyverse)
library(psrchousing)
export_path <- "H:/Projects/2024/Regional Data Profile Update"
source_info <- c("OFM April 1 Population and Housing Estimates. Data representing 2000 thru 2024. Calculated by Eric Clute.")
most_recent_vintage <- 2024
years <- c(2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024)
decades_and_most_recent_yr <- c(2000, 2010, 2020)
decades_and_most_recent_yr <- unique(c(decades_and_most_recent_yr, most_recent_vintage))
# CHART #3 - Total Housing Units by County ---------------------
chart_3 <- chart_1 %>%
filter(year = most_recent_vintage)
hu_raw <- ofm_county_housing_unit_data()
hu <- hu_raw %>%
filter(year %in% years) %>%
select(year, geography, sf, mf, mh, total)
# CHART #1 - Housing Units by County ---------------------
chart_1 <- hu %>%
select(year, geography, total) %>%
pivot_wider(names_from = geography, values_from = total)
# CHART #2 - Housing Units by Structure Type ---------------------
chart_2 <- hu %>%
filter(year %in% decades_and_most_recent_yr) %>%
filter(geography == "Region")
# CHART #3 - Total Housing Units by County ---------------------
chart_3 <- chart_1 %>%
filter(year = most_recent_vintage)
# CHART #3 - Total Housing Units by County ---------------------
chart_3 <- chart_1 %>%
filter(year == most_recent_vintage)
View(chart_3)
# CHART #4 - Total Housing Units Entire Region ---------------------
chart_4 <- chart_1 %>%
select(year, Region)
View(chart_4)
# Cleanup and export ---------------------
export_file <- paste0(export_path, "/reg_housing_raw.xlsx")
work_book <- createWorkbook()
addWorksheet(work_book, sheetName = "chart_1")
writeData(work_book, sheet = "chart_1", chart_1)
writeData(work_book, sheet = "chart_1", x = data.frame(source_info), startRow = nrow(chart_1) + 3, startCol = 1)
addWorksheet(work_book, sheetName = "chart_2")
writeData(work_book, sheet = "chart_2", chart_2)
writeData(work_book, sheet = "chart_2", x = data.frame(source_info), startRow = nrow(chart_2) + 3, startCol = 1)
addWorksheet(work_book, sheetName = "chart_3")
writeData(work_book, sheet = "chart_3", chart_3)
writeData(work_book, sheet = "chart_3", x = data.frame(source_info), startRow = nrow(chart_3) + 3, startCol = 1)
addWorksheet(work_book, sheetName = "chart_4")
writeData(work_book, sheet = "chart_4", chart_4)
writeData(work_book, sheet = "chart_4", x = data.frame(source_info), startRow = nrow(chart_4) + 3, startCol = 1)
saveWorkbook(work_book, file = export_file, overwrite = TRUE)
most_recent_vintage <- 2024
years <- seq(2000, most_recent_vintage)
print(years)
decades_and_most_recent_yr <- c(2000, 2010, 2020)
most_recent_vintage <- 2024
years <- seq(2000, most_recent_vintage)
decades <- c(2000, 2010, 2020)
decades_and_most_recent_yr <- unique(c(decades, most_recent_vintage))
library(dplyr)
library(openxlsx)
library(tidyverse)
library(psrchousing)
export_path <- "H:/Projects/2024/Regional Data Profile Update"
source_info <- c("OFM April 1 Population and Housing Estimates. Data representing 2000 thru 2024. Calculated by Eric Clute.")
newest_vintage <- 2024
years <- seq(2000, newest_vintage)
decades <- c(2000, 2010, 2020)
decades_and_newest_vintage <- unique(c(decades, newest_vintage))
# Import & Clean ---------------------
hu_raw <- ofm_county_housing_unit_data()
hu <- hu_raw %>%
filter(year %in% years) %>%
select(year, geography, sf, mf, mh, total)
# CHART #1 - Housing Units by County ---------------------
chart_1 <- hu %>%
select(year, geography, total) %>%
pivot_wider(names_from = geography, values_from = total)
# CHART #2 - Housing Units by Structure Type ---------------------
chart_2 <- hu %>%
filter(year %in% decades_and_newest_vintage) %>%
filter(geography == "Region")
# CHART #3 - Total Housing Units by County ---------------------
chart_3 <- chart_1 %>%
filter(year == newest_vintage)
# CHART #4 - Total Housing Units Entire Region ---------------------
chart_4 <- chart_1 %>%
select(year, Region)
View(chart_1)
View(chart_2)
View(chart_3)
View(chart_4)
View(chart_1)
# CHART #1 - Housing Units by County ---------------------
chart_1 <- hu %>%
select(year, geography, total) %>%
pivot_wider(names_from = geography, values_from = total) %>%
select(-c(Region))
# CHART #3 - Total Housing Units by County ---------------------
chart_3 <- hu %>%
select(year, geography, total) %>%
pivot_wider(names_from = geography, values_from = total) %>%
filter(year == newest_vintage)
# CHART #4 - Total Housing Units Entire Region ---------------------
chart_4 <- hu %>%
select(year, geography, total) %>%
pivot_wider(names_from = geography, values_from = total) %>%
select(year, Region)
View(chart_4)
# Crunching housing data for Regional Data Profile
# Geographies: Region & Counties
# Data Vintage: 2024 OFM April 1 estimates
# Created By: Eric Clute
# Assumptions ---------------------
library(dplyr)
library(openxlsx)
library(tidyverse)
library(psrchousing)
export_path <- "H:/Projects/2024/Regional Data Profile Update"
source_info <- c("OFM April 1 Population and Housing Estimates. Data representing 2000 thru 2024. Calculated by Eric Clute.")
newest_vintage <- 2024
years <- seq(2000, newest_vintage)
decades <- c(2000, 2010, 2020)
decades_and_newest_vintage <- unique(c(decades, newest_vintage))
# Import & Clean ---------------------
hu_raw <- ofm_county_housing_unit_data()
hu <- hu_raw %>%
filter(year %in% years) %>%
select(year, geography, sf, mf, mh, total)
# CHART #1 - Total Housing Units by County ---------------------
chart_1 <- hu %>%
select(year, geography, total) %>%
pivot_wider(names_from = geography, values_from = total) %>%
select(-c(Region))
# CHART #2 - Housing Units by Structure Type ---------------------
chart_2 <- hu %>%
filter(year %in% decades_and_newest_vintage) %>%
filter(geography == "Region")
# CHART #3 - Total Housing Units by County ---------------------
chart_3 <- hu %>%
select(year, geography, total) %>%
pivot_wider(names_from = geography, values_from = total) %>%
filter(year == newest_vintage)
# CHART #4 - Total Housing Units Entire Region ---------------------
chart_4 <- hu %>%
select(year, geography, total) %>%
pivot_wider(names_from = geography, values_from = total) %>%
select(year, Region)
# Cleanup and export ---------------------
export_file <- paste0(export_path, "/reg_housing_raw.xlsx")
work_book <- createWorkbook()
addWorksheet(work_book, sheetName = "chart_1")
writeData(work_book, sheet = "chart_1", chart_1)
writeData(work_book, sheet = "chart_1", x = data.frame(source_info), startRow = nrow(chart_1) + 3, startCol = 1)
addWorksheet(work_book, sheetName = "chart_2")
writeData(work_book, sheet = "chart_2", chart_2)
writeData(work_book, sheet = "chart_2", x = data.frame(source_info), startRow = nrow(chart_2) + 3, startCol = 1)
addWorksheet(work_book, sheetName = "chart_3")
writeData(work_book, sheet = "chart_3", chart_3)
writeData(work_book, sheet = "chart_3", x = data.frame(source_info), startRow = nrow(chart_3) + 3, startCol = 1)
addWorksheet(work_book, sheetName = "chart_4")
writeData(work_book, sheet = "chart_4", chart_4)
writeData(work_book, sheet = "chart_4", x = data.frame(source_info), startRow = nrow(chart_4) + 3, startCol = 1)
saveWorkbook(work_book, file = export_file, overwrite = TRUE)
# Crunching housing data for Regional Data Profile
# Geographies: Region & Counties
# Data Vintage: 2024 OFM April 1 estimates
# Created By: Eric Clute
# Assumptions ---------------------
library(dplyr)
library(openxlsx)
library(tidyverse)
library(psrchousing)
export_path <- "H:/Projects/2024/Regional Data Profile Update"
source_info <- c("OFM April 1 Housing Estimates. Data representing 2000 thru 2024. Calculated by Eric Clute.")
newest_vintage <- 2024
years <- seq(2000, newest_vintage)
decades <- c(2000, 2010, 2020)
decades_and_newest_vintage <- unique(c(decades, newest_vintage))
# Import & Clean ---------------------
hu_raw <- ofm_county_housing_unit_data()
hu <- hu_raw %>%
filter(year %in% years) %>%
select(year, geography, sf, mf, mh, total)
# CHART #1 - Total Housing Units by County ---------------------
chart_1 <- hu %>%
select(year, geography, total) %>%
pivot_wider(names_from = geography, values_from = total) %>%
select(-c(Region))
# CHART #2 - Housing Units by Structure Type ---------------------
chart_2 <- hu %>%
filter(year %in% decades_and_newest_vintage) %>%
filter(geography == "Region")
# CHART #3 - Total Housing Units by County ---------------------
chart_3 <- hu %>%
select(year, geography, total) %>%
pivot_wider(names_from = geography, values_from = total) %>%
filter(year == newest_vintage)
# CHART #4 - Total Housing Units Entire Region ---------------------
chart_4 <- hu %>%
select(year, geography, total) %>%
pivot_wider(names_from = geography, values_from = total) %>%
select(year, Region)
# Cleanup and export ---------------------
export_file <- paste0(export_path, "/reg_housing_raw.xlsx")
work_book <- createWorkbook()
addWorksheet(work_book, sheetName = "chart_1")
writeData(work_book, sheet = "chart_1", chart_1)
writeData(work_book, sheet = "chart_1", x = data.frame(source_info), startRow = nrow(chart_1) + 3, startCol = 1)
addWorksheet(work_book, sheetName = "chart_2")
writeData(work_book, sheet = "chart_2", chart_2)
writeData(work_book, sheet = "chart_2", x = data.frame(source_info), startRow = nrow(chart_2) + 3, startCol = 1)
addWorksheet(work_book, sheetName = "chart_3")
writeData(work_book, sheet = "chart_3", chart_3)
writeData(work_book, sheet = "chart_3", x = data.frame(source_info), startRow = nrow(chart_3) + 3, startCol = 1)
addWorksheet(work_book, sheetName = "chart_4")
writeData(work_book, sheet = "chart_4", chart_4)
writeData(work_book, sheet = "chart_4", x = data.frame(source_info), startRow = nrow(chart_4) + 3, startCol = 1)
saveWorkbook(work_book, file = export_file, overwrite = TRUE)
newest_vintage <- 2025
years <- seq(2000, newest_vintage)
decades <- c(2000, 2010, 2020)
decades_and_newest_vintage <- unique(c(decades, newest_vintage))
library(openxlsx)
library(tidyr)
library(tidyverse)
library(stringr)
library(dplyr)
library(psrccensus)
library(magrittr)
library(ggplot2)
# assumptions
export_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric21_avg_mortgage_payment"
source_info <- c("Source: Zillow, Home Value Index; Freddie Mac, Primary Mortgage Market Survey; calculated by PSRC.")
metro_area <- "Seattle, WA"
earliestdate <- "2012-11-30"
latestdate <- "2024-11-30"
smalltbl_earliestdate <- "2021-11-30"
smalltbl_latestdate <- "2024-11-30"
term <- 360                     # 30 year mortgage
downpayment <- 0.20             # JCHS report used 3.5% but I will use 20% given our market conditions
propertytax <- 0.01             # King County is 1%, Snohomish County is 0.89%
propertyins <- 0.0035           # same as JCHS
mortgageins <- 0.00             # set to 0 for 20% downpayment
maxdebttoincome <- 0.31         # same as JCHS
interest_url <- "https://www.freddiemac.com/pmms/docs/historicalweeklydata.xlsx"
ZHVI_url <- "https://files.zillowstatic.com/research/public_csvs/zhvi/Metro_zhvi_uc_sfrcondo_tier_0.33_0.67_sm_sa_month.csv"
ZORI_url <- "https://files.zillowstatic.com/research/public_csvs/zori/Metro_zori_uc_sfrcondomfr_sm_sa_month.csv?t=1711667054"
# ZORI: Zillow Observed Rent Index - All Homes + Multifamily, Smoothed, Seasonally-Adjusted
# ZHVI: Zillow Home Value Index - All Homes (SFR & Condo) Time series, Smoothed, Seasonally-Adjusted
# ---------------- Mortgage Rate DATA ----------------
# download Mortgage Rate data from FreddieMac site
int_raw = read.xlsx(interest_url, sheet=1)
# clean up table
int <- int_raw[-(1:4),]
int <- subset(int, select = c(X1, X2))
# clean up data
int$X1 <- convertToDate(int$X1)
int$X2 <- as.numeric(int$X2)
int <- int[!is.na(int$X2),]
int <- int %>%
rename("int_date" = "X1") %>%
rename("int_rate" = "X2")
# refine dates
int <- with(int, int[(int_date >= earliestdate & int_date <= latestdate), ])
int$month <- str_sub(int$int_date, 1, 7)
int <- int[!duplicated(int$month), ]
# ---------------- ZILLOW DATA ----------------
ZORI_raw = read.csv(ZORI_url)
ZHVI_raw = read.csv(ZHVI_url)
# Clean data
ZORI <- subset(ZORI_raw, ZORI_raw$RegionName == metro_area)
ZHVI <- subset(ZHVI_raw, ZHVI_raw$RegionName == metro_area)
colnames(ZORI)<-gsub("X","",colnames(ZORI))
colnames(ZHVI)<-gsub("X","",colnames(ZHVI))
ZORI_long <- ZORI %>% select(starts_with("20"))
ZORI_long %<>% pivot_longer(everything(), names_to = "date", values_to = "zori_rent")
ZORI_long$month <- str_sub(ZORI_long$date, 1, 7)
ZORI_long$month <- gsub("\\.", "-", ZORI_long$month)
ZORI_long  %<>% relocate(month, .before = date)
ZORI_long$date <- gsub("\\.", "-", ZORI_long$date)
ZHVI_long <- ZHVI %>% select(starts_with("20"))
ZHVI_long %<>% pivot_longer(everything(), names_to = "date", values_to = "zhvi_value")
ZHVI_long$month <- str_sub(ZHVI_long$date, 1, 7)
ZHVI_long$month <- gsub("\\.", "-", ZHVI_long$month)
ZHVI_long  %<>% relocate(month, .before = date)
ZHVI_long <- subset(ZHVI_long, select = -c(date))
zillow <- merge(ZHVI_long, ZORI_long, by= "month")
# ---------------- JOIN DATA & ANALYZE ----------------
# crunch monthly payment, required income
analysis <- zillow %>% left_join(int)
analysis <- na.omit(analysis)
analysis$date <- as.Date(analysis$date)
analysis$mthlyrate <- analysis$int_rate / 100 / 12
analysis$r <- (1 + analysis$mthlyrate) ^ term - 1
analysis$loan_amt = analysis$zhvi_value - (downpayment * analysis$zhvi_value)
analysis$propertytax_mnthlypymt = analysis$loan_amt * propertytax / 12
analysis$propertyins_mnthlypymt = analysis$loan_amt * propertyins / 12
analysis$mortgageins_mnthlypymt = analysis$loan_amt * mortgageins / 12
analysis$payment = analysis$loan_amt * analysis$mthlyrate * ((analysis$r + 1) / analysis$r) + (analysis$propertytax_mnthlypymt + analysis$propertyins_mnthlypymt + analysis$mortgageins_mnthlypymt)
analysis$reqincome = (analysis$payment / maxdebttoincome) * 12
# ---------------- SMALL TABLE FOR EXPORT ----------------
smalltbl <- with(analysis, analysis[(date >= smalltbl_earliestdate & date <= smalltbl_latestdate), ])
smalltbl <- subset(smalltbl, str_sub(smalltbl$date, -5,-4) == str_sub(smalltbl_earliestdate, -5,-4))
smalltbl <- subset(smalltbl, select = c(date, int_rate, zhvi_value, payment, reqincome))
smalltbl <- smalltbl %>% arrange(ymd(smalltbl$date))
# ---------------- GRAPHING ----------------
reqincome_vs_int_plot <- ggplot(analysis)  +
geom_bar(aes(x=date, y=int_rate*20000),stat="identity", fill="skyblue2",colour="#ffffff")+
geom_line(aes(x=date, y=reqincome),stat="identity",color="grey40", linewidth=1)+
labs(title= paste(metro_area, "MSA - Mortgage for Median Home"),
x="Year",y="Minimum Income Required ($)") +
scale_y_continuous(labels=function(x) format(x, big.mark = ",", scientific = FALSE),sec.axis=sec_axis(~.*0.00005,name="Mortgage Rate (%)")) +
scale_x_date(breaks = scales::breaks_width("1 year"),minor_breaks = scales::breaks_width("1 year")) +
theme(text = element_text(size = 20))
reqincome_vs_int_plot
mortgage_vs_rent_plot <- ggplot(analysis)  +
geom_line(aes(x=date, y=payment),stat="identity",color="grey40", linewidth=1)+
geom_line(aes(x=date, y=zori_rent),stat="identity",color="skyblue2", linewidth=1)+
labs(title= paste(metro_area, "MSA - Mortgage vs Median Rent"),
x="Year",y="Monthly Payment ($)") +
scale_y_continuous(labels=function(x) format(x, big.mark = ",", scientific = FALSE),expand = c(0, 0), limits = c(0, NA)) +
scale_x_date(breaks = scales::breaks_width("1 year"),minor_breaks = scales::breaks_width("1 year")) +
theme(text = element_text(size = 20))
mortgage_vs_rent_plot
# pymt_int_plot <- ggplot(analysis)  +
#   geom_bar(aes(x=date, y=payment),stat="identity", fill="skyblue2",colour="#ffffff")+
#   geom_line(aes(x=date, y=int_rate*1000),stat="identity",color="grey40", size=1)+
#   labs(title= paste(metro_area, " - Mortgage for Median Home"),
#        x="Year",y="Monthly Mortgage") +
#   scale_y_continuous(labels=function(x) format(x, big.mark = ",", scientific = FALSE),sec.axis=sec_axis(~.*0.001,name="Mortgage Rate (%)")) +
#   scale_x_date(breaks = scales::breaks_width("2 year")) +
#   theme(text = element_text(size = 20))
# pymt_int_plot
# reqincome_plot <- ggplot(analysis)  +
#   geom_line(aes(x=date, y=reqincome),stat="identity",color="grey40", size=1)+
#   labs(title= paste(metro_area, " - Mortgage for Median Home"),
#        x="Year",y="Minimum Income Required($)") +
#   scale_x_date(breaks = scales::breaks_width("2 year")) +
#   scale_y_continuous(limits = c(0,200000),labels=function(x) format(x, big.mark = ",", scientific = FALSE)) +
#   theme(text = element_text(size = 20))
# reqincome_plot
library(dplyr)
library(openxlsx)
library(tidyverse)
library(psrchousing)
export_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric01_pop_growth_hu_supply"
source_info <- c("OFM April 1 Population and Housing Estimates. Data representing 1980, 1990, 2000, 2010, 2020, 2024. Calculated by Eric Clute.")
years <- c(1980, 1990, 2000, 2010, 2020, 2024)
# Import ---------------------
hu_raw <- ofm_county_housing_unit_data()
pop_raw <- ofm_county_population_data()
View(pop_raw)
library(dplyr)
library(openxlsx)
library(tidyverse)
library(psrchousing)
install.packages('psrchousing')
library(psrccensus)
library(openxlsx)
library(tidycensus)
library(tidyverse)
library(psrcplot)
