hh_inc <- pull_data(years)
# ---------------- Functions ------------------
pull_data <- function(years){
# returns a list of get_psrc_pums outputs, one for each year
lapply(years, function(x) get_psrc_pums(1, x, "h",c("HINCP")))
}
inc_clean_func <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = "MSA", rr=TRUE)
}
# pull the data
hh_inc <- pull_data(years)
inc_clean_func <- function(hh_inc){
hh_inc[[1]][["variables"]] <- hh_inc[[1]][["variables"]] %>%
mutate(hh_inc[[1]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = "MSA", rr=TRUE)
}
# Summarize by income
hh_inc_all <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows)
inc_clean_func <- function(hh_inc){
hh_inc <- hh_inc %>%
mutate(hh_inc, MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = "MSA", rr=TRUE)
}
# Summarize by income
hh_inc_all <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows)
inc_clean_func <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = "MSA", rr=TRUE)
}
hh_inc <- hh_inc %>%
mutate(hh_inc, MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
hh_inc[[1]][["variables"]] <- hh_inc[[1]][["variables"]] %>%
mutate(hh_inc[[1]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
inc_clean_func <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = "MSA", rr=TRUE)
}
# Summarize by income
hh_inc_all <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows)
View(hh_inc_all)
# Summarize by income
hh_inc_all <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows) %>%
filter(MSA == "Seattle Tacoma Bellevue MSA")
View(hh_inc_all)
years <- c(2015,2016,2017,2018,2019,2021,2022)
# ---------------- Functions ------------------
pull_data <- function(years){
# returns a list of get_psrc_pums outputs, one for each year
lapply(years, function(x) get_psrc_pums(1, x, "h",c("HINCP")))
}
inc_clean_func <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = "MSA", rr=TRUE)
}
# pull the data
hh_inc <- pull_data(years)
hh_inc[[1]][["variables"]] <- hh_inc[[1]][["variables"]] %>%
mutate(hh_inc[[1]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
View(hh_inc)
# Summarize by income
hh_inc_all <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows) %>%
filter(MSA == "Seattle Tacoma Bellevue MSA")
View(hh_inc)
View(hh_inc)
hh_inc[[1]][["variables"]] <- hh_inc[[1]][["variables"]] %>%
mutate(hh_inc[[1]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
hh_inc[[2]][["variables"]] <- hh_inc[[2]][["variables"]] %>%
mutate(hh_inc[[2]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
hh_inc[[3]][["variables"]] <- hh_inc[[3]][["variables"]] %>%
mutate(hh_inc[[3]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
hh_inc[[4]][["variables"]] <- hh_inc[[4]][["variables"]] %>%
mutate(hh_inc[[4]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
hh_inc[[5]][["variables"]] <- hh_inc[[5]][["variables"]] %>%
mutate(hh_inc[[5]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
hh_inc[[6]][["variables"]] <- hh_inc[[6]][["variables"]] %>%
mutate(hh_inc[[6]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
hh_inc[[7]][["variables"]] <- hh_inc[[7]][["variables"]] %>%
mutate(hh_inc[[7]][["variables"]], MSA=dplyr::case_when(COUNTY=="Kitsap" ~NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"))
# Summarize by income
hh_inc_all <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows) %>%
filter(MSA == "Seattle Tacoma Bellevue MSA")
View(hh_inc_all)
devtools::install_github(“psrc/psrchousing”)
devtools::install_github("psrc/psrchousing")
# Import ---------------------
hu_raw <- ofm_county_housing_unit_data()
library(dplyr)
library(openxlsx)
library(tidyverse)
library(psrchousing)
export_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric01_pop_growth_hu_supply"
source_info <- c("OFM April 1 Population and Housing Estimates. Data representing 1980, 1990, 2000, 2010, 2020, 2024. Calculated by Eric Clute.")
years <- c(1980, 1990, 2000, 2010, 2020, 2024)
# Import ---------------------
hu_raw <- ofm_county_housing_unit_data()
View(hu_raw)
pop_raw <- ofm_county_population_data()
View(pop_raw)
# Clean up data, join ---------------------
hu <- hu_raw %>% filter(geography == "Region") %>% select(year, total) %>% rename(units = total)
pop <- pop_raw %>% filter(geography == "Region") %>% select(year, population)
analysis <- full_join(hu,pop, by = "year")
# Calculate change in pop, hu, and ratio ---------------------
analysis <- analysis %>%
filter(year %in% years) %>%
mutate(hu_change = units - lag(units),
pop_change = population - lag(population),
hu_pop_ratio = pop_change / hu_change)
View(analysis)
View(hu)
View(pop)
# Cleanup and export ---------------------
export_file <- paste0(export_path, "/metric01_raw.xlsx")
work_book <- createWorkbook()
addWorksheet(work_book, sheetName = "analysis")
writeData(work_book, sheet = "analysis", analysis)
writeData(work_book, sheet = "analysis", x = data.frame(source_info), startRow = nrow(analysis) + 3, startCol = 1)
saveWorkbook(work_book, file = export_file, overwrite = TRUE)
View(analysis)
library(ggplot2)
# Graph --------------------
ggplot(analysis, aes(x = year, y = Value, fill = Variable)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Population and Units per Decade", x = "Decade", y = "Values") +
scale_fill_manual(values = c("skyblue", "orange"))
# Graph --------------------
ggplot(analysis, aes(x = year, y = population, fill = Variable)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Population and Units per Decade", x = "Decade", y = "Values") +
scale_fill_manual(values = c("skyblue", "orange"))
# Graph --------------------
ggplot(analysis, aes(x = year, y = population, fill = units)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Population and Units per Decade", x = "Decade", y = "Values") +
scale_fill_manual(values = c("skyblue", "orange"))
pop <- pop_raw %>% filter(geography == "Region") %>% select(year, population) %>% select (-c(geography))
pop <- pop_raw %>% filter(geography == "Region") %>% select(year, population) %>% select -c(geography)
View(pop_raw)
View(pop)
pop <- pop %>% select(year, population)
pop <- pop_raw %>% filter(geography == "Region")
pop <- pop %>% select(year, population)
View(pop)
pop <- pop_raw %>% filter(geography == "Region") %>% select(year, population) %>% select(!geography)
pop <- pop_raw %>% filter(geography == "Region") %>% select(year, population) %>% !select(geography)
View(pop)
View(pop_raw)
pop <- pop_raw %>% filter(geography == "Region") %>% select(year, population) %>% select!(geography)
pop <- pop_raw %>% filter(geography == "Region") %>% select(!c(year, population))
View(pop)
# Clean up data, join ---------------------
hu <- hu_raw %>% filter(geography == "Region") %>% select(c(year, total)) %>% rename(units = total)
pop <- pop_raw %>% filter(geography == "Region") %>% select(c(year, population))
pop <- pop_raw %>% filter(geography == "Region") %>% ungroup() %>% select(c(year, population))
View(pop)
# Clean up data, join ---------------------
hu <- hu_raw %>% filter(geography == "Region") %>% select(c(geography, year, total)) %>% rename(units = total)
pop <- pop_raw %>% filter(geography == "Region") %>% ungroup() %>% select(c(year, population))
analysis <- full_join(hu,pop, by = "year")
View(analysis)
# Clean up data, join ---------------------
hu <- hu_raw %>% filter(geography == "Region") %>% select(year, total) %>% rename(units = total)
pop <- pop_raw %>% filter(geography == "Region") %>% select(year, population)
analysis <- full_join(hu,pop, by = "year")
# Import ---------------------
hu_raw <- ofm_county_housing_unit_data()
pop_raw <- ofm_county_population_data()
# Clean up data, join ---------------------
hu <- hu_raw %>% filter(geography == "Region") %>% select(year, total) %>% rename(units = total)
pop <- pop_raw %>% filter(geography == "Region") %>% select(year, population)
analysis <- full_join(hu,pop, by = "year")
analysis <- full_join(hu,pop, by = "year", unmatched = "drop")
analysis <- full_join(hu,pop, by = "year", keep = NULL)
View(analysis)
analysis <- left_join(hu,pop, by = "year")
pop <- pop_raw %>% filter(geography == "Region") %>% ungroup() %>% select(year, population)
analysis <- left_join(hu,pop, by = "year")
View(analysis)
# Calculate change in pop, hu, and ratio ---------------------
analysis <- analysis %>%
filter(year %in% years) %>%
mutate(hu_change = units - lag(units),
pop_change = population - lag(population),
hu_pop_ratio = pop_change / hu_change)
View(analysis)
View(hu)
export_file <- paste0(export_path, "/metric01_raw.xlsx")
work_book <- createWorkbook()
addWorksheet(work_book, sheetName = "analysis")
writeData(work_book, sheet = "analysis", analysis)
writeData(work_book, sheet = "analysis", x = data.frame(source_info), startRow = nrow(analysis) + 3, startCol = 1)
saveWorkbook(work_book, file = export_file, overwrite = TRUE)
library(openxlsx)
library(tidyr)
library(stringr)
library(dplyr)
library(magrittr)
library(psrccensus)
library(tidycensus)
library(purrr)
library(readxl)
library(psrchousing)
years <- c(2015,2016,2017,2018,2019,2021,2022)
counties <- c("King", "Pierce", "Snohomish")
# ---------------- Functions ------------------
pull_data <- function(years){
# returns a list of get_psrc_pums outputs, one for each year
lapply(years, function(x) get_psrc_pums(1, x, "h",c("HINCP")))
}
inc_clean_func <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = "MSA", rr=TRUE)
}
# Function to get columns that start with a number
get_numeric_cols <- function(df) {
colnames(df)[str_detect(colnames(df), "^[0-9]")]  # Regular expression to match column names starting with a digit
}
# ---------------- ACS HH Income data -----------------
# I know this is messy code - I couldn't figure out how to have the MSA column be created within the function. Could be cleaned up!
# pull the data
hh_inc <- pull_data(years)
library(openxlsx)
library(tidyr)
library(stringr)
library(dplyr)
library(magrittr)
library(psrccensus)
library(tidycensus)
library(purrr)
library(readxl)
library(psrchousing)
years <- c(2015,2016)#,2017,2018,2019,2021,2022)
counties <- c("King", "Pierce", "Snohomish")
# ---------------- Functions ------------------
pull_data <- function(years){
# returns a list of get_psrc_pums outputs, one for each year
lapply(years, function(x) get_psrc_pums(1, x, "h",c("HINCP")))
}
inc_clean_func <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = "MSA", rr=TRUE)
}
# Function to get columns that start with a number
get_numeric_cols <- function(df) {
colnames(df)[str_detect(colnames(df), "^[0-9]")]  # Regular expression to match column names starting with a digit
}
# ---------------- ACS HH Income data -----------------
# I know this is messy code - I couldn't figure out how to have the MSA column be created within the function. Could be cleaned up!
# pull the data
hh_inc <- pull_data(years)
library(openxlsx)
library(tidyr)
library(stringr)
library(dplyr)
library(magrittr)
library(psrccensus)
library(tidycensus)
library(purrr)
library(readxl)
library(psrchousing)
years <- c(2015,2016)#,2017,2018,2019,2021,2022)
counties <- c("King", "Pierce", "Snohomish")
# ---------------- Functions ------------------
pull_data <- function(years){
# returns a list of get_psrc_pums outputs, one for each year
lapply(years, function(x) get_psrc_pums(1, x, "h",c("HINCP")))
}
inc_clean_func <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = "MSA", rr=TRUE)
}
# Function to get columns that start with a number
get_numeric_cols <- function(df) {
colnames(df)[str_detect(colnames(df), "^[0-9]")]  # Regular expression to match column names starting with a digit
}
# ---------------- ACS HH Income data -----------------
# I know this is messy code - I couldn't figure out how to have the MSA column be created within the function. Could be cleaned up!
# pull the data
hh_inc <- pull_data(years)
library(openxlsx)
library(tidyr)
library(stringr)
library(dplyr)
library(magrittr)
library(psrccensus)
library(tidycensus)
library(purrr)
library(readxl)
library(psrchousing)
years <- c(2015,2016)#,2017,2018,2019,2021,2022)
counties <- c("King", "Pierce", "Snohomish")
# ---------------- Functions ------------------
pull_data <- function(years){
# returns a list of get_psrc_pums outputs, one for each year
lapply(years, function(x) get_psrc_pums(1, x, "h",c("HINCP")))
}
inc_clean_func <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = "MSA", rr=TRUE)
}
# Function to get columns that start with a number
get_numeric_cols <- function(df) {
colnames(df)[str_detect(colnames(df), "^[0-9]")]  # Regular expression to match column names starting with a digit
}
# ---------------- ACS HH Income data -----------------
# I know this is messy code - I couldn't figure out how to have the MSA column be created within the function. Could be cleaned up!
# pull the data
hh_inc <- pull_data(years)
# Apply the mutate operation to add the MSA column to each element in hh_inc
hh_inc <- map(hh_inc, function(data) {
data[["variables"]] <- data[["variables"]] %>%
mutate(MSA = case_when(
COUNTY == "Kitsap" ~ NA_character_,
!is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"
))
return(data)
})
# Summarize by income
hh_inc_all <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows) %>%
filter(MSA == "Seattle Tacoma Bellevue MSA")
View(hh_inc_all)
library(openxlsx)
library(tidyr)
library(stringr)
library(dplyr)
library(magrittr)
library(psrccensus)
library(tidycensus)
library(purrr)
library(readxl)
library(psrchousing)
years <- c(2015,2016,2017,2018,2019,2021,2022)
counties <- c("King", "Pierce", "Snohomish")
# ---------------- Functions ------------------
pull_data <- function(years){
# returns a list of get_psrc_pums outputs, one for each year
lapply(years, function(x) get_psrc_pums(1, x, "h",c("HINCP")))
}
inc_clean_func <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = "MSA", rr=TRUE)
}
# Function to get columns that start with a number
get_numeric_cols <- function(df) {
colnames(df)[str_detect(colnames(df), "^[0-9]")]  # Regular expression to match column names starting with a digit
}
# ---------------- ACS HH Income data -----------------
# I know this is messy code - I couldn't figure out how to have the MSA column be created within the function. Could be cleaned up!
# pull the data
hh_inc <- pull_data(years)
# Apply the mutate operation to add the MSA column to each element in hh_inc
hh_inc <- map(hh_inc, function(data) {
data[["variables"]] <- data[["variables"]] %>%
mutate(MSA = case_when(
COUNTY == "Kitsap" ~ NA_character_,
!is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"
))
return(data)
})
# Summarize by income
hh_inc_all <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows) %>%
filter(MSA == "Seattle Tacoma Bellevue MSA")
View(hh_inc_all)
library(openxlsx)
library(tidyr)
library(stringr)
library(dplyr)
library(magrittr)
library(psrccensus)
library(tidycensus)
library(purrr)
library(readxl)
library(psrchousing)
# assumptions
#  ZHVI: Zillow Home Value Index - All Homes (SFR & Condo) Time series, Smoothed, Seasonally-Adjusted
#  ZORI: Zillow Observed Rent Index - All Homes + Multifamily, Smoothed, Seasonally-Adjusted
export_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric12-13_metro_area_rent_home_value"
ZHVI_url <- "https://files.zillowstatic.com/research/public_csvs/zhvi/Metro_zhvi_uc_sfrcondo_tier_0.33_0.67_sm_sa_month.csv"
ZORI_url <- "https://files.zillowstatic.com/research/public_csvs/zori/Metro_zori_uc_sfrcondomfr_sm_sa_month.csv?t=1711667054"
ofm_inc_url <- "https://ofm.wa.gov/sites/default/files/public/dataresearch/economy/median_household_income_estimates.xlsx"
ofm_inc_file <- "median_household_income_estimates.xlsx"
years <- c(2015,2016)#,2017,2018,2019,2021,2022)
counties <- c("King", "Pierce", "Snohomish")
# ---------------- Functions ------------------
pull_data <- function(years){
# returns a list of get_psrc_pums outputs, one for each year
lapply(years, function(x) get_psrc_pums(1, x, "h",c("HINCP","TEN")))
}
inc_clean_func <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = "MSA", rr=TRUE)
}
# Function to get columns that start with a number
get_numeric_cols <- function(df) {
colnames(df)[str_detect(colnames(df), "^[0-9]")]  # Regular expression to match column names starting with a digit
}
# ---------------- ACS HH Income data -----------------
# pull the data
hh_inc <- pull_data(years)
View(hh_inc)
View(hh_inc)
View(hh_inc[[1]][["variables"]])
# Apply the mutate operation to add the MSA column to each element in hh_inc
hh_inc <- map(hh_inc, function(data) {
data[["variables"]] <- data[["variables"]] %>%
mutate(MSA = case_when(COUNTY == "Kitsap" ~ NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"),
tenure = case_when(TEN == "Rented" ~ "renter", !is.na(TEN) ~ "owner"))
return(data)
})
View(hh_inc[[1]][["variables"]])
# Summarize by income (owners and renters)
hh_inc_all <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows) %>%
filter(MSA == "Seattle Tacoma Bellevue MSA")
hh_inc_renter <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows) %>%
filter(MSA == "Seattle Tacoma Bellevue MSA",
tenure = "renter")
hh_inc_renter <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows) %>%
filter(MSA == "Seattle Tacoma Bellevue MSA",
tenure = "renter")
hh_inc_renter <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows) %>%
filter(MSA == "Seattle Tacoma Bellevue MSA",
tenure == "renter")
hh_inc_renter <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows) %>%
filter(MSA == "Seattle Tacoma Bellevue MSA" | tenure == "renter")
View(hh_inc)
# Summarize by income (owners and renters)
hh_inc_all <- map(hh_inc, ~inc_clean_func(.x)) %>%
reduce(bind_rows) #%>%
View(hh_inc_all)
hh_inc[[1]]
rm(inc_clean_func)
inc_clean_func_all <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = "MSA", rr=TRUE)
}
inc_clean_func_tenure <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = c("MSA", "tenure"), rr=TRUE)
}
# Summarize by income (owners and renters)
hh_inc_all <- map(hh_inc, ~inc_clean_func_all(.x)) %>%
reduce(bind_rows) %>%
filter(MSA == "Seattle Tacoma Bellevue MSA")
View(hh_inc_all)
hh_inc_renter <- map(hh_inc, ~inc_clean_func_tenure(.x)) %>%
reduce(bind_rows)# %>%
View(hh_inc_renter)
hh_inc_renter <- map(hh_inc, ~inc_clean_func_tenure(.x)) %>%
reduce(bind_rows) %>%
filter(MSA == "Seattle Tacoma Bellevue MSA" | tenure != "Total")
View(hh_inc_renter)
hh_inc_renter <- map(hh_inc, ~inc_clean_func_tenure(.x)) %>%
reduce(bind_rows) %>%
filter(MSA == "Seattle Tacoma Bellevue MSA", tenure != "Total")
View(hh_inc_renter)
hh_inc_tenure <- map(hh_inc, ~inc_clean_func_tenure(.x)) %>%
reduce(bind_rows) %>%
filter(MSA == "Seattle Tacoma Bellevue MSA")
View(hh_inc_tenure)
# TITLE: Home Value & Rent
# GEOGRAPHIES: Seattle MSA
# DATA SOURCE: Zillow, ACS
# DATE MODIFIED: 8.27.2024
# AUTHOR: Eric Clute
library(openxlsx)
library(tidyr)
library(stringr)
library(dplyr)
library(magrittr)
library(psrccensus)
library(tidycensus)
library(purrr)
library(readxl)
library(psrchousing)
# assumptions
#  ZHVI: Zillow Home Value Index - All Homes (SFR & Condo) Time series, Smoothed, Seasonally-Adjusted
#  ZORI: Zillow Observed Rent Index - All Homes + Multifamily, Smoothed, Seasonally-Adjusted
export_path <- "J:/Projects/V2050/Housing/Monitoring/2024Update/Data/metric12-13_metro_area_rent_home_value"
ZHVI_url <- "https://files.zillowstatic.com/research/public_csvs/zhvi/Metro_zhvi_uc_sfrcondo_tier_0.33_0.67_sm_sa_month.csv"
ZORI_url <- "https://files.zillowstatic.com/research/public_csvs/zori/Metro_zori_uc_sfrcondomfr_sm_sa_month.csv?t=1711667054"
ofm_inc_url <- "https://ofm.wa.gov/sites/default/files/public/dataresearch/economy/median_household_income_estimates.xlsx"
ofm_inc_file <- "median_household_income_estimates.xlsx"
years <- c(2015,2016,2017,2018,2019,2021,2022)
counties <- c("King", "Pierce", "Snohomish")
# ---------------- Functions ------------------
pull_data <- function(years){
# returns a list of get_psrc_pums outputs, one for each year
lapply(years, function(x) get_psrc_pums(1, x, "h",c("HINCP","TEN")))
}
inc_clean_func_tenure <- function(hh_inc){
hh_inc_calc <- psrc_pums_median(hh_inc, "HINCP", group_vars = c("MSA", "tenure"), rr=TRUE)
}
# Function to get columns that start with a number
get_numeric_cols <- function(df) {
colnames(df)[str_detect(colnames(df), "^[0-9]")]  # Regular expression to match column names starting with a digit
}
# ---------------- ACS HH Income data -----------------
# pull the data
hh_inc <- pull_data(years)
# Apply the mutate operation to add the MSA column to each element in hh_inc
hh_inc <- map(hh_inc, function(data) {
data[["variables"]] <- data[["variables"]] %>%
mutate(MSA = case_when(COUNTY == "Kitsap" ~ NA_character_, !is.na(COUNTY) ~ "Seattle Tacoma Bellevue MSA"),
tenure = case_when(TEN == "Rented" ~ "renter", !is.na(TEN) ~ "owner"))
return(data)
})
# Summarize by county and tenure
hh_inc_tenure <- map(hh_inc, ~inc_clean_func_tenure(.x)) %>%
reduce(bind_rows) %>%
filter(MSA == "Seattle Tacoma Bellevue MSA")
